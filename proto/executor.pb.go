// Code generated by protoc-gen-go. DO NOT EDIT.
// source: executor.proto

/*
Package dkron is a generated protocol buffer package.

It is generated from these files:
	executor.proto

It has these top-level messages:
	Execution
	ExecutorArgs
	PluginConfig
	ExecuteRequest
	ExecuteResponse
*/
package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"
import google_protobuf1 "github.com/golang/protobuf/ptypes/any"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Execution struct {
	// Name of the job this executions refers to.
	JobName    string                     `protobuf:"bytes,1,opt,name=job_name,json=jobName" json:"job_name,omitempty"`
	StartedAt  *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=started_at,json=startedAt" json:"started_at,omitempty"`
	FinishedAt *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=finished_at,json=finishedAt" json:"finished_at,omitempty"`
	Success    bool                       `protobuf:"varint,4,opt,name=success" json:"success,omitempty"`
	Output     []byte                     `protobuf:"bytes,5,opt,name=output,proto3" json:"output,omitempty"`
	NodeName   string                     `protobuf:"bytes,6,opt,name=node_name,json=nodeName" json:"node_name,omitempty"`
	Group      int64                      `protobuf:"varint,7,opt,name=group" json:"group,omitempty"`
	Attempt    uint32                     `protobuf:"varint,8,opt,name=attempt" json:"attempt,omitempty"`
}

func (m *Execution) Reset()                    { *m = Execution{} }
func (m *Execution) String() string            { return proto.CompactTextString(m) }
func (*Execution) ProtoMessage()               {}
func (*Execution) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Execution) GetJobName() string {
	if m != nil {
		return m.JobName
	}
	return ""
}

func (m *Execution) GetStartedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.StartedAt
	}
	return nil
}

func (m *Execution) GetFinishedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.FinishedAt
	}
	return nil
}

func (m *Execution) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *Execution) GetOutput() []byte {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *Execution) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *Execution) GetGroup() int64 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *Execution) GetAttempt() uint32 {
	if m != nil {
		return m.Attempt
	}
	return 0
}

type ExecutorArgs struct {
	Execution *Execution    `protobuf:"bytes,1,opt,name=execution" json:"execution,omitempty"`
	Config    *PluginConfig `protobuf:"bytes,2,opt,name=config" json:"config,omitempty"`
}

func (m *ExecutorArgs) Reset()                    { *m = ExecutorArgs{} }
func (m *ExecutorArgs) String() string            { return proto.CompactTextString(m) }
func (*ExecutorArgs) ProtoMessage()               {}
func (*ExecutorArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ExecutorArgs) GetExecution() *Execution {
	if m != nil {
		return m.Execution
	}
	return nil
}

func (m *ExecutorArgs) GetConfig() *PluginConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type PluginConfig struct {
	Config map[string]*google_protobuf1.Any `protobuf:"bytes,1,rep,name=config" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *PluginConfig) Reset()                    { *m = PluginConfig{} }
func (m *PluginConfig) String() string            { return proto.CompactTextString(m) }
func (*PluginConfig) ProtoMessage()               {}
func (*PluginConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PluginConfig) GetConfig() map[string]*google_protobuf1.Any {
	if m != nil {
		return m.Config
	}
	return nil
}

type ExecuteRequest struct {
	ExecutorArgs *ExecutorArgs `protobuf:"bytes,1,opt,name=executor_args,json=executorArgs" json:"executor_args,omitempty"`
}

func (m *ExecuteRequest) Reset()                    { *m = ExecuteRequest{} }
func (m *ExecuteRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecuteRequest) ProtoMessage()               {}
func (*ExecuteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ExecuteRequest) GetExecutorArgs() *ExecutorArgs {
	if m != nil {
		return m.ExecutorArgs
	}
	return nil
}

type ExecuteResponse struct {
	Error string `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *ExecuteResponse) Reset()                    { *m = ExecuteResponse{} }
func (m *ExecuteResponse) String() string            { return proto.CompactTextString(m) }
func (*ExecuteResponse) ProtoMessage()               {}
func (*ExecuteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ExecuteResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*Execution)(nil), "dkron.Execution")
	proto.RegisterType((*ExecutorArgs)(nil), "dkron.ExecutorArgs")
	proto.RegisterType((*PluginConfig)(nil), "dkron.PluginConfig")
	proto.RegisterType((*ExecuteRequest)(nil), "dkron.ExecuteRequest")
	proto.RegisterType((*ExecuteResponse)(nil), "dkron.ExecuteResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Executor service

type ExecutorClient interface {
	Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error)
}

type executorClient struct {
	cc *grpc.ClientConn
}

func NewExecutorClient(cc *grpc.ClientConn) ExecutorClient {
	return &executorClient{cc}
}

func (c *executorClient) Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error) {
	out := new(ExecuteResponse)
	err := grpc.Invoke(ctx, "/dkron.Executor/Execute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Executor service

type ExecutorServer interface {
	Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error)
}

func RegisterExecutorServer(s *grpc.Server, srv ExecutorServer) {
	s.RegisterService(&_Executor_serviceDesc, srv)
}

func _Executor_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dkron.Executor/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).Execute(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Executor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dkron.Executor",
	HandlerType: (*ExecutorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Execute",
			Handler:    _Executor_Execute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "executor.proto",
}

func init() { proto.RegisterFile("executor.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 453 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xd5, 0x36, 0x24, 0xb1, 0xc7, 0x69, 0xa9, 0xb6, 0xa5, 0x72, 0xcd, 0xa1, 0x96, 0x2f, 0x58,
	0x20, 0xb9, 0x52, 0x38, 0x10, 0xe0, 0x14, 0x41, 0x2e, 0x1c, 0x00, 0xad, 0xb8, 0x47, 0x4e, 0x32,
	0x31, 0x6e, 0xe2, 0x5d, 0xb3, 0xbb, 0x46, 0xe4, 0x9f, 0x70, 0xe1, 0xbf, 0xa2, 0xec, 0x47, 0x48,
	0x0b, 0x12, 0x27, 0xfb, 0xcd, 0xbc, 0x79, 0x33, 0xf3, 0x66, 0xe1, 0x0c, 0x7f, 0xe0, 0xb2, 0xd3,
	0x42, 0x16, 0xad, 0x14, 0x5a, 0xd0, 0xfe, 0x6a, 0x23, 0x05, 0x4f, 0x6e, 0x2a, 0x21, 0xaa, 0x2d,
	0xde, 0x9a, 0xe0, 0xa2, 0x5b, 0xdf, 0xea, 0xba, 0x41, 0xa5, 0xcb, 0xa6, 0xb5, 0xbc, 0xe4, 0xfa,
	0x21, 0xa1, 0xe4, 0x3b, 0x9b, 0xca, 0x7e, 0x9d, 0x40, 0x38, 0x33, 0xaa, 0xb5, 0xe0, 0xf4, 0x1a,
	0x82, 0x3b, 0xb1, 0x98, 0xf3, 0xb2, 0xc1, 0x98, 0xa4, 0x24, 0x0f, 0xd9, 0xf0, 0x4e, 0x2c, 0x3e,
	0x96, 0x0d, 0xd2, 0xd7, 0x00, 0x4a, 0x97, 0x52, 0xe3, 0x6a, 0x5e, 0xea, 0xf8, 0x24, 0x25, 0x79,
	0x34, 0x4e, 0x0a, 0x2b, 0x5c, 0x78, 0xe1, 0xe2, 0x8b, 0xef, 0xcc, 0x42, 0xc7, 0x9e, 0x6a, 0xfa,
	0x16, 0xa2, 0x75, 0xcd, 0x6b, 0xf5, 0xd5, 0xd6, 0xf6, 0xfe, 0x5b, 0x0b, 0x9e, 0x3e, 0xd5, 0x34,
	0x86, 0xa1, 0xea, 0x96, 0x4b, 0x54, 0x2a, 0x7e, 0x94, 0x92, 0x3c, 0x60, 0x1e, 0xd2, 0x2b, 0x18,
	0x88, 0x4e, 0xb7, 0x9d, 0x8e, 0xfb, 0x29, 0xc9, 0x47, 0xcc, 0x21, 0xfa, 0x14, 0x42, 0x2e, 0x56,
	0x68, 0xb7, 0x18, 0x98, 0x2d, 0x82, 0x7d, 0xc0, 0xac, 0x71, 0x09, 0xfd, 0x4a, 0x8a, 0xae, 0x8d,
	0x87, 0x29, 0xc9, 0x7b, 0xcc, 0x82, 0x7d, 0x93, 0x52, 0x6b, 0x6c, 0x5a, 0x1d, 0x07, 0x29, 0xc9,
	0x4f, 0x99, 0x87, 0xd9, 0x06, 0x46, 0x33, 0x67, 0xfa, 0x54, 0x56, 0x8a, 0x16, 0x10, 0xa2, 0xb7,
	0xcb, 0x58, 0x14, 0x8d, 0xcf, 0x0b, 0x73, 0x86, 0xe2, 0x60, 0x23, 0xfb, 0x43, 0xa1, 0x2f, 0x60,
	0xb0, 0x14, 0x7c, 0x5d, 0x57, 0xce, 0xb2, 0x0b, 0x47, 0xfe, 0xbc, 0xed, 0xaa, 0x9a, 0xbf, 0x33,
	0x29, 0xe6, 0x28, 0xd9, 0x4f, 0x02, 0xa3, 0xe3, 0x04, 0x7d, 0x75, 0xa8, 0x26, 0x69, 0x2f, 0x8f,
	0xc6, 0x37, 0xff, 0xa8, 0x2e, 0xec, 0x67, 0xc6, 0xb5, 0xdc, 0x79, 0xa5, 0xe4, 0x13, 0x44, 0x47,
	0x61, 0x7a, 0x0e, 0xbd, 0x0d, 0xee, 0xdc, 0x49, 0xf7, 0xbf, 0xf4, 0x39, 0xf4, 0xbf, 0x97, 0xdb,
	0x0e, 0xdd, 0x58, 0x97, 0x7f, 0x5d, 0x63, 0xca, 0x77, 0xcc, 0x52, 0xde, 0x9c, 0x4c, 0x48, 0xf6,
	0x01, 0xce, 0xec, 0x7e, 0xc8, 0xf0, 0x5b, 0x87, 0x4a, 0xd3, 0x09, 0x9c, 0xfa, 0xe7, 0x38, 0x2f,
	0x65, 0xa5, 0x9c, 0x1b, 0x17, 0xf7, 0xdc, 0xb0, 0xae, 0xb1, 0x11, 0x1e, 0xa1, 0xec, 0x19, 0x3c,
	0x3e, 0x68, 0xa9, 0x56, 0x70, 0x65, 0xce, 0x82, 0x52, 0x0a, 0xe9, 0x46, 0xb4, 0x60, 0xfc, 0x1e,
	0x02, 0x2f, 0x43, 0x27, 0x30, 0x74, 0x45, 0xf4, 0xc9, 0xbd, 0x16, 0x7e, 0xa0, 0xe4, 0xea, 0x61,
	0xd8, 0x6a, 0x2f, 0x06, 0x66, 0xa7, 0x97, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xf9, 0xe8, 0xfa,
	0x40, 0x3e, 0x03, 0x00, 0x00,
}
