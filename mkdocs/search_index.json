{
    "docs": [
        {
            "location": "/", 
            "text": "Characteristics\n\n\n  \n\n    \n\n    \n\n      \nEasy integration\n\n      \nDkron is easy to setup and use. Choose your OS package and it's ready to run out-of-the-box. The administration panel and it's simple JSON API makes a breeze to integrate with you current workflow or deploy system.\n\n    \n\n  \n\n\n  \n\n    \n\n    \n\n      \nAlways available\n\n      \nUsing the power of distributed key-value stores, Dkron is designed to be always available. If the leader node fails, a follower will replace it, all without human intervention.\n\n    \n\n  \n\n\n  \n\n    \n\n    \n\n      \nFlexible targets\n\n      \nSimple but powerful tag-based target node selection for jobs. Tag node count allows to run jobs in an arbitrary number nodes in the same group or groups.", 
            "title": "Home"
        }, 
        {
            "location": "/intro/", 
            "text": "Dkron - Distributed, fault tolerant job scheduling system\n\n\nWelcome to the Dkron documentation! This is the reference guide on how to use Dkron. If you want a getting started guide refer to the \ngetting started guide\n.\n\n\nWarning: Dkron is Under heavy development, it's considered alpha state, expect dragons.\n\n\n\nWhat is Dkron\n\n\nDkron it's distributed system to run scheduled jobs against a server or a group of servers of any size. One of the machines is the leader and the others will be followers. If the leader fails or becomes unreachable, any other one will take over and reschedule all jobs to keep the system healthy.\n\n\nIn case the old leader becomes alive again, it'll become a follower.\n\n\nDkron is a distributed cron drop-in replacement, easy to setup and fault tolerant with focus in:\n\n\n\n\nEasy: Easy to use with a great UI\n\n\nReliable: Completely fault tolerant\n\n\nHigh scalable: Able to handle high volumes of scheduled jobs and thousands of nodes\n\n\n\n\nDkron is written in Go and leverage the power of distributed key value stores and \nSerf\n for providing fault tolerance, reliability and scalability while keeping simple and easily installable.\n\n\nDkron is inspired by the google whitepaper \nReliable Cron across the Planet\n\n\nDkron runs on Linux, OSX and Windows. It can be used to run scheduled commands on a server cluster using any combination of servers for each job. It has no single points of failure due to the use of the fault tolerant distributed databases and can work at large scale thanks to the efficient and lightweight gossip protocol.\n\n\nDkron uses the efficient and lightweight \ngossip protocol\n underneath to communicate with nodes. Failure notification and task handling are run efficiently across an entire cluster of any size.\n\n\n\n\n\n\n\n\nDkron design\n\n\nDkron is designed to solve one problem well, executing commands in given intervals. Following the unix philosophy of doing one thing and doing it well (like the battle-tested cron) but with the given addition of being designed for the cloud era, removing single points of failure in environments where scheduled jobs are needed to be run in multiple servers.", 
            "title": "Intro"
        }, 
        {
            "location": "/intro/#dkron-distributed-fault-tolerant-job-scheduling-system", 
            "text": "Welcome to the Dkron documentation! This is the reference guide on how to use Dkron. If you want a getting started guide refer to the  getting started guide .  Warning: Dkron is Under heavy development, it's considered alpha state, expect dragons.", 
            "title": "Dkron - Distributed, fault tolerant job scheduling system"
        }, 
        {
            "location": "/intro/#what-is-dkron", 
            "text": "Dkron it's distributed system to run scheduled jobs against a server or a group of servers of any size. One of the machines is the leader and the others will be followers. If the leader fails or becomes unreachable, any other one will take over and reschedule all jobs to keep the system healthy.  In case the old leader becomes alive again, it'll become a follower.  Dkron is a distributed cron drop-in replacement, easy to setup and fault tolerant with focus in:   Easy: Easy to use with a great UI  Reliable: Completely fault tolerant  High scalable: Able to handle high volumes of scheduled jobs and thousands of nodes   Dkron is written in Go and leverage the power of distributed key value stores and  Serf  for providing fault tolerance, reliability and scalability while keeping simple and easily installable.  Dkron is inspired by the google whitepaper  Reliable Cron across the Planet  Dkron runs on Linux, OSX and Windows. It can be used to run scheduled commands on a server cluster using any combination of servers for each job. It has no single points of failure due to the use of the fault tolerant distributed databases and can work at large scale thanks to the efficient and lightweight gossip protocol.  Dkron uses the efficient and lightweight  gossip protocol  underneath to communicate with nodes. Failure notification and task handling are run efficiently across an entire cluster of any size.", 
            "title": "What is Dkron"
        }, 
        {
            "location": "/intro/#dkron-design", 
            "text": "Dkron is designed to solve one problem well, executing commands in given intervals. Following the unix philosophy of doing one thing and doing it well (like the battle-tested cron) but with the given addition of being designed for the cloud era, removing single points of failure in environments where scheduled jobs are needed to be run in multiple servers.", 
            "title": "Dkron design"
        }, 
        {
            "location": "/docs/getting-started/", 
            "text": "Getting started\n\n\nWelcome to the intro guide to dkron! This will explain how to setup dkron, how easy is to use it, what problems could it help you to solve, etc.\n\n\nIntroduction\n\n\nDkron nodes can work in two modes, agents or servers.\n\n\nServers are agents too. You can use servers to run jobs.\n\n\nThe main distinction is that servers order job executions and can be used to schedule jobs.\n\n\nDkron servers have a leader, the leader is responsible of executing jobs in the cluster.\n\n\nAny Dkron agent or server acts as a cluster member and it's available to run scheduled tasks.\n\n\nYou can choose whether a job is run on a node or nodes by specifying tags and a count of target nodes having this tag do you want a job to run. For example you can specify to run a job at 5:00am in all servers with \nrole=web\n tag or you can specify to run a job in just one server having the \nrole=web\n tag:\n\n\nrole=web:1\n\n\n\n\ndkron will try to run the job in the amount of nodes indicated by that count having that tag.\n\n\nThis gives an unprecedented level of flexibility in runnig jobs across a cluster of any size and with any combination of machines you need.\n\n\nAll the execution responses will be gathered by the scheduler and stored in the database.\n\n\nRequirements\n\n\nDkron relies on the key-value store for data storage, you can run an instance of the distributed store in the same machines as Dkron or connect it to your existing cluster.\n\n\nIt can use etcd, Consul or Zookeeper as data stores. To install any of this systems got to their web site:\n\n\n\n\netcd\n\n\nConsul\n\n\nZooKeeper\n\n\n\n\nInstallation\n\n\nSimply download the packaged archive for your platform from the \ndownloads page\n, extract the package to a shared location in your drive, like \n/opt/local\n and run it from there.\n\n\nThere's a \n.deb\n package available too.\n\n\nUbuntu\n\n\nThe recommended way to install Dkron is using the \n.deb\n package.\n\n\nSample upstart scripts for dkron are included in the \ndebian\n folder\n\n\nDebian\n\n\nSample init scripts are included in the \ndebian\n folder\n\n\nConfiguration\n\n\nSee the \nconfiguration section\n.\n\n\nUsage\n\n\nBy default dkron will try to use a local etcd server running in the same machine and in the default port. You can specify the store by setting the \nbackend\n and \nbackend-machines\n flag in the config file, env variables or as a command line flag.\n\n\nTo start a dkron server instance just run:\n\n\ndkron agent -server", 
            "title": "Getting started"
        }, 
        {
            "location": "/docs/getting-started/#getting-started", 
            "text": "Welcome to the intro guide to dkron! This will explain how to setup dkron, how easy is to use it, what problems could it help you to solve, etc.", 
            "title": "Getting started"
        }, 
        {
            "location": "/docs/getting-started/#introduction", 
            "text": "Dkron nodes can work in two modes, agents or servers.  Servers are agents too. You can use servers to run jobs.  The main distinction is that servers order job executions and can be used to schedule jobs.  Dkron servers have a leader, the leader is responsible of executing jobs in the cluster.  Any Dkron agent or server acts as a cluster member and it's available to run scheduled tasks.  You can choose whether a job is run on a node or nodes by specifying tags and a count of target nodes having this tag do you want a job to run. For example you can specify to run a job at 5:00am in all servers with  role=web  tag or you can specify to run a job in just one server having the  role=web  tag:  role=web:1  dkron will try to run the job in the amount of nodes indicated by that count having that tag.  This gives an unprecedented level of flexibility in runnig jobs across a cluster of any size and with any combination of machines you need.  All the execution responses will be gathered by the scheduler and stored in the database.", 
            "title": "Introduction"
        }, 
        {
            "location": "/docs/getting-started/#requirements", 
            "text": "Dkron relies on the key-value store for data storage, you can run an instance of the distributed store in the same machines as Dkron or connect it to your existing cluster.  It can use etcd, Consul or Zookeeper as data stores. To install any of this systems got to their web site:   etcd  Consul  ZooKeeper", 
            "title": "Requirements"
        }, 
        {
            "location": "/docs/getting-started/#installation", 
            "text": "Simply download the packaged archive for your platform from the  downloads page , extract the package to a shared location in your drive, like  /opt/local  and run it from there.  There's a  .deb  package available too.  Ubuntu  The recommended way to install Dkron is using the  .deb  package.  Sample upstart scripts for dkron are included in the  debian  folder  Debian  Sample init scripts are included in the  debian  folder", 
            "title": "Installation"
        }, 
        {
            "location": "/docs/getting-started/#configuration", 
            "text": "See the  configuration section .", 
            "title": "Configuration"
        }, 
        {
            "location": "/docs/getting-started/#usage", 
            "text": "By default dkron will try to use a local etcd server running in the same machine and in the default port. You can specify the store by setting the  backend  and  backend-machines  flag in the config file, env variables or as a command line flag.  To start a dkron server instance just run:  dkron agent -server", 
            "title": "Usage"
        }, 
        {
            "location": "/docs/configuration/", 
            "text": "Configuration\n\n\nSettings for dkron can be specified in three ways: Using a \nconfig/dkron.json\n config file, using env variables starting with \nDKRON_\n or using command line arguments.\n\n\nCommand line options\n\n\n\n\n\n\n-node\n - Name of the node, must be unique in the cluster. By default this is the hostname of the machine.\n\n\n\n\n\n\n-bind\n - The address that dkron will bind to for communication with other dkron nodes. By default this is \"0.0.0.0:8946\". dkron nodes may have different ports. If a join is specified without a port, we default to locally configured port. dkron uses both TCP and UDP and use the same port for both, so if you have any firewalls be sure to allow both protocols. If this configuration value is changed and no port is specified, the default of \"8946\" will be used.\n\n\n\n\n\n\n-http-addr\n - The address where the web UI will be binded. By default \n:8080\n\n\n\n\n\n\n-backend\n - Backend storage to use, etcd, consul or zk (zookeeper). The default is etcd.\n\n\n\n\n\n\n-backend-machine\n - Comma separated addresses of the etcd machines to use. Could be one or several. By default \n127.0.0.1:2379\n\n\n\n\n\n\n-tag\n - The tag flag is used to associate a new key/value pair with the agent. The tags are gossiped and can be used to provide additional information such as roles, ports, and configuration values to other nodes. Multiple tags can be specified per agent. There is a byte size limit for the maximum number of tags, but in practice dozens of tags may be used. Tags can be changed during a config reload.\n\n\n\n\n\n\n-server\n - If this agent is a dkron server, just need to be present. Absent by default.\n\n\n\n\n\n\n-keyspace\n - Keyspace to use for the store. Allows to run different instances using the same storage cluster. \ndkron\n by default.\n\n\n\n\n\n\n-encrypt\n - Key for encrypting network traffic. Must be a base64-encoded 16-byte key.\n\n\n\n\n\n\n-mail-host\n - Mail server host address to use for notifications.\n\n\n\n\n\n\n-mail-port\n - Mail server port.\n\n\n\n\n\n\n-mail-username\n - Mail server username used for authentication.\n\n\n\n\n\n\n-mail-password\n - Mail server password to use.\n\n\n\n\n\n\n-mail-from\n - From email address to use.\n\n\n\n\n\n\n-webhook-url\n - Webhook url to call for notifications.\n\n\n\n\n\n\n-webhook-payload\n - Body of the POST request to send on webhook call.\n\n\n\n\n\n\n-webhook-header\n - Headers to use when calling the webhook URL. Can be specified multiple times.\n\n\n\n\n\n\n-debug\n - Output debug info.\n\n\n\n\n\n\n-ui-dir\n - Directory from where to serve web UI.\n\n\n\n\n\n\n-rpc-port\n - The port that Dkron will use to bind for the agent's RPC server, defaults to 6868. The RPC address will be the bind address.", 
            "title": "Configuration"
        }, 
        {
            "location": "/docs/configuration/#configuration", 
            "text": "Settings for dkron can be specified in three ways: Using a  config/dkron.json  config file, using env variables starting with  DKRON_  or using command line arguments.", 
            "title": "Configuration"
        }, 
        {
            "location": "/docs/configuration/#command-line-options", 
            "text": "-node  - Name of the node, must be unique in the cluster. By default this is the hostname of the machine.    -bind  - The address that dkron will bind to for communication with other dkron nodes. By default this is \"0.0.0.0:8946\". dkron nodes may have different ports. If a join is specified without a port, we default to locally configured port. dkron uses both TCP and UDP and use the same port for both, so if you have any firewalls be sure to allow both protocols. If this configuration value is changed and no port is specified, the default of \"8946\" will be used.    -http-addr  - The address where the web UI will be binded. By default  :8080    -backend  - Backend storage to use, etcd, consul or zk (zookeeper). The default is etcd.    -backend-machine  - Comma separated addresses of the etcd machines to use. Could be one or several. By default  127.0.0.1:2379    -tag  - The tag flag is used to associate a new key/value pair with the agent. The tags are gossiped and can be used to provide additional information such as roles, ports, and configuration values to other nodes. Multiple tags can be specified per agent. There is a byte size limit for the maximum number of tags, but in practice dozens of tags may be used. Tags can be changed during a config reload.    -server  - If this agent is a dkron server, just need to be present. Absent by default.    -keyspace  - Keyspace to use for the store. Allows to run different instances using the same storage cluster.  dkron  by default.    -encrypt  - Key for encrypting network traffic. Must be a base64-encoded 16-byte key.    -mail-host  - Mail server host address to use for notifications.    -mail-port  - Mail server port.    -mail-username  - Mail server username used for authentication.    -mail-password  - Mail server password to use.    -mail-from  - From email address to use.    -webhook-url  - Webhook url to call for notifications.    -webhook-payload  - Body of the POST request to send on webhook call.    -webhook-header  - Headers to use when calling the webhook URL. Can be specified multiple times.    -debug  - Output debug info.    -ui-dir  - Directory from where to serve web UI.    -rpc-port  - The port that Dkron will use to bind for the agent's RPC server, defaults to 6868. The RPC address will be the bind address.", 
            "title": "Command line options"
        }, 
        {
            "location": "/docs/api/", 
            "text": "REST API\n\n\nYou can communicate with dkron using a RESTful JSON API over HTTP. dkron nodes usually listen on port \n8080\n for API requests. All examples in this section assume that you've found a running leader at \ndkron-node:8080\n.\n\n\ndkron implements a RESTful JSON API over HTTP to communicate with software clients. dkron listens in port \n8080\n by default. All examples in this section assume that you're using the default port.\n\n\nDefault API responses are unformatted JSON add \n?pretty\n to the URL call to format the response.\n\n\nStatus\n\n\nStatus represents details about the node.\n\n\nAttributes\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nagent\n\n\nobject\n\n\nNode basic details\n\n\n{\"name\":\"dkron2\",\"version\":\"0.0.4\"}\n\n\n\n\n\n\nserf\n\n\nobject\n\n\nSerf status\n\n\n{\"encrypted\":\"false\",\"...\":\"...\"}\n\n\n\n\n\n\ntags\n\n\nobject\n\n\nTags asociated with this node\n\n\n{\"role\":\"web\",\"server\":\"true\"}\n\n\n\n\n\n\n\n\nStatus\n\n\nStatus.\n\n\nGET /v1/\n\n\n\n\nCurl Example\n\n\n$ curl -n dkron-node:8080/v1/\n\n\n\n\nResponse Example\n\n\nHTTP/1.1 200 OK\n\n\n\n\n{\n  \nagent\n: {\n    \nname\n: \ndkron2\n,\n    \nversion\n: \n0.0.4\n\n  },\n  \nserf\n: {\n    \nencrypted\n: \nfalse\n,\n    \n...\n: \n...\n\n  },\n  \ntags\n: {\n    \nrole\n: \nweb\n,\n    \nserver\n: \ntrue\n\n  }\n}\n\n\n\n\nJob\n\n\nA Job represents a scheduled task to execute.\n\n\nAttributes\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstring\n\n\njob name\n\n\n\"cron_job\"\n\n\n\n\n\n\nschedule\n\n\nstring\n\n\ncron expression for the job\n\n\n\"0 30 * * * *\"\n\n\n\n\n\n\ncommand\n\n\nstring\n\n\ncommand to run. Must be a shell command to execute\n\n\n\"/usr/bin/date\"\n\n\n\n\n\n\nowner\n\n\nstring\n\n\nowner of the job\n\n\n\"John Doe\"\n\n\n\n\n\n\nowner_email\n\n\nemail\n\n\nemail of the owner\n\n\n\"john@doe.com\"\n\n\n\n\n\n\nrun_as_user\n\n\nhostname\n\n\nthe user to use to run the job\n\n\n\"johndoe\"\n\n\n\n\n\n\nsuccess_count\n\n\ninteger\n\n\nnumber of successful executions\n\n\n20\n\n\n\n\n\n\nerror_count\n\n\ninteger\n\n\nnumber of failed executions\n\n\n5\n\n\n\n\n\n\nlast_success\n\n\ndate-time\n\n\nlast time this job executed successfully\n\n\n\"0001-01-01T00:00:00Z\"\n\n\n\n\n\n\nlast_error\n\n\ndate-time\n\n\nlast time this job failed\n\n\n\"0001-01-01T100:00:00Z\"\n\n\n\n\n\n\ndisabled\n\n\nboolean\n\n\ndisabled state of the job\n\n\nfalse\n\n\n\n\n\n\ntags\n\n\nobject\n\n\ntags of the target server to run this job\n\n\n{\"role\":\"web\"}\n\n\n\n\n\n\n\n\nJob Create or update\n\n\nCreate or updates a new job.\n\n\nPOST /v1/jobs\n\n\n\n\nRequired Parameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstring\n\n\njob name\n\n\n\"cron_job\"\n\n\n\n\n\n\nschedule\n\n\nstring\n\n\ncron expression for the job\n\n\n\"0 30 * * * *\"\n\n\n\n\n\n\ncommand\n\n\nstring\n\n\ncommand to run. Must be a shell command to execute\n\n\n\"/usr/bin/date\"\n\n\n\n\n\n\n\n\nOptional Parameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nowner\n\n\nstring\n\n\nowner of the job\n\n\n\"John Doe\"\n\n\n\n\n\n\nowner_email\n\n\nemail\n\n\nemail of the owner\n\n\n\"john@doe.com\"\n\n\n\n\n\n\nrun_as_user\n\n\nhostname\n\n\nthe user to use to run the job\n\n\n\"johndoe\"\n\n\n\n\n\n\ndisabled\n\n\nboolean\n\n\ndisabled state of the job\n\n\nfalse\n\n\n\n\n\n\ntags\n\n\nobject\n\n\ntags of the target server to run this job\n\n\n{\"role\":\"web\"}\n\n\n\n\n\n\n\n\nCurl Example\n\n\n$ curl -n -X POST dkron-node:8080/v1/jobs \\\n  -H \nContent-Type: application/json\n \\\n \\\n  -d '{\n  \nname\n: \ncron_job\n,\n  \nschedule\n: \n0 30 * * * *\n,\n  \ncommand\n: \n/usr/bin/date\n,\n  \nowner\n: \nJohn Doe\n,\n  \nowner_email\n: \njohn@doe.com\n,\n  \nrun_as_user\n: \njohndoe\n,\n  \ndisabled\n: false,\n  \ntags\n: {\n    \nrole\n: \nweb\n\n  }\n}'\n\n\n\n\nResponse Example\n\n\nHTTP/1.1 201 Created\n\n\n\n\n{\n  \nname\n: \ncron_job\n,\n  \nschedule\n: \n0 30 * * * *\n,\n  \ncommand\n: \n/usr/bin/date\n,\n  \nowner\n: \nJohn Doe\n,\n  \nowner_email\n: \njohn@doe.com\n,\n  \nrun_as_user\n: \njohndoe\n,\n  \nsuccess_count\n: 20,\n  \nerror_count\n: 5,\n  \nlast_success\n: \n0001-01-01T00:00:00Z\n,\n  \nlast_error\n: \n0001-01-01T100:00:00Z\n,\n  \ndisabled\n: false,\n  \ntags\n: {\n    \nrole\n: \nweb\n\n  }\n}\n\n\n\n\nJob Show\n\n\nShow job.\n\n\nGET /v1/jobs/{job_name}\n\n\n\n\nCurl Example\n\n\n$ curl -n dkron-node:8080/v1/jobs/$JOB_NAME\n\n\n\n\nResponse Example\n\n\nHTTP/1.1 200 OK\n\n\n\n\n{\n  \nname\n: \ncron_job\n,\n  \nschedule\n: \n0 30 * * * *\n,\n  \ncommand\n: \n/usr/bin/date\n,\n  \nowner\n: \nJohn Doe\n,\n  \nowner_email\n: \njohn@doe.com\n,\n  \nrun_as_user\n: \njohndoe\n,\n  \nsuccess_count\n: 20,\n  \nerror_count\n: 5,\n  \nlast_success\n: \n0001-01-01T00:00:00Z\n,\n  \nlast_error\n: \n0001-01-01T100:00:00Z\n,\n  \ndisabled\n: false,\n  \ntags\n: {\n    \nrole\n: \nweb\n\n  }\n}\n\n\n\n\nJob Delete\n\n\nDelete job.\n\n\nDELETE /v1/jobs/{job_name}\n\n\n\n\nCurl Example\n\n\n$ curl -n -X DELETE dkron-node:8080/v1/jobs/$JOB_NAME \\\n  -H \nContent-Type: application/json\n \\\n\n\n\n\nResponse Example\n\n\nHTTP/1.1 200 OK\n\n\n\n\n{\n  \nname\n: \ncron_job\n,\n  \nschedule\n: \n0 30 * * * *\n,\n  \ncommand\n: \n/usr/bin/date\n,\n  \nowner\n: \nJohn Doe\n,\n  \nowner_email\n: \njohn@doe.com\n,\n  \nrun_as_user\n: \njohndoe\n,\n  \nsuccess_count\n: 20,\n  \nerror_count\n: 5,\n  \nlast_success\n: \n0001-01-01T00:00:00Z\n,\n  \nlast_error\n: \n0001-01-01T100:00:00Z\n,\n  \ndisabled\n: false,\n  \ntags\n: {\n    \nrole\n: \nweb\n\n  }\n}\n\n\n\n\nJob List\n\n\nList jobs.\n\n\nGET /v1/jobs\n\n\n\n\nCurl Example\n\n\n$ curl -n dkron-node:8080/v1/jobs\n\n\n\n\nResponse Example\n\n\nHTTP/1.1 200 OK\n\n\n\n\n[\n  {\n    \nname\n: \ncron_job\n,\n    \nschedule\n: \n0 30 * * * *\n,\n    \ncommand\n: \n/usr/bin/date\n,\n    \nowner\n: \nJohn Doe\n,\n    \nowner_email\n: \njohn@doe.com\n,\n    \nrun_as_user\n: \njohndoe\n,\n    \nsuccess_count\n: 20,\n    \nerror_count\n: 5,\n    \nlast_success\n: \n0001-01-01T00:00:00Z\n,\n    \nlast_error\n: \n0001-01-01T100:00:00Z\n,\n    \ndisabled\n: false,\n    \ntags\n: {\n      \nrole\n: \nweb\n\n    }\n  }\n]\n\n\n\n\nJob Run\n\n\nRun job.\n\n\nPOST /v1/jobs/{job_name}\n\n\n\n\nCurl Example\n\n\n$ curl -n -X POST dkron-node:8080/v1/jobs/$JOB_NAME \\\n  -H \nContent-Type: application/json\n \\\n\n\n\n\nResponse Example\n\n\nHTTP/1.1 200 OK\n\n\n\n\n{\n  \nname\n: \ncron_job\n,\n  \nschedule\n: \n0 30 * * * *\n,\n  \ncommand\n: \n/usr/bin/date\n,\n  \nowner\n: \nJohn Doe\n,\n  \nowner_email\n: \njohn@doe.com\n,\n  \nrun_as_user\n: \njohndoe\n,\n  \nsuccess_count\n: 20,\n  \nerror_count\n: 5,\n  \nlast_success\n: \n0001-01-01T00:00:00Z\n,\n  \nlast_error\n: \n0001-01-01T100:00:00Z\n,\n  \ndisabled\n: false,\n  \ntags\n: {\n    \nrole\n: \nweb\n\n  }\n}\n\n\n\n\nMember\n\n\nA member represents a cluster member node.\n\n\nAttributes\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nName\n\n\nboolean\n\n\nNode name\n\n\n\"dkron1\"\n\n\n\n\n\n\nAddr\n\n\nstring\n\n\nIP Address\n\n\n\"10.0.0.1\"\n\n\n\n\n\n\nPort\n\n\ninteger\n\n\nPort number\n\n\n5001\n\n\n\n\n\n\nTags\n\n\nobject\n\n\nTags asociated with this node\n\n\n{\"role\":\"web\",\"server\":\"true\"}\n\n\n\n\n\n\nStatus\n\n\ninteger\n\n\nThe serf status of the node see: https://godoc.org/github.com/hashicorp/serf/serf#MemberStatus\n\n\n1\n\n\n\n\n\n\nProtocolMin\n\n\ninteger\n\n\nSerf protocol minimum version this node can understand or speak\n\n\n1\n\n\n\n\n\n\nProtocolMax\n\n\ninteger\n\n\nSerf protocol minimum version this node can understand or speak\n\n\n2\n\n\n\n\n\n\nProtocolCur\n\n\ninteger\n\n\nSerf protocol current version this node can understand or speak\n\n\n2\n\n\n\n\n\n\nDelegateMin\n\n\ninteger\n\n\nSerf delegate protocol minimum version this node can understand or speak\n\n\n2\n\n\n\n\n\n\nDelegateMax\n\n\ninteger\n\n\nSerf delegate protocol minimum version this node can understand or speak\n\n\n4\n\n\n\n\n\n\nDelegateCur\n\n\ninteger\n\n\nSerf delegate protocol minimum version this node can understand or speak\n\n\n4\n\n\n\n\n\n\n\n\nMember List\n\n\nList members.\n\n\nGET /v1/members\n\n\n\n\nCurl Example\n\n\n$ curl -n dkron-node:8080/v1/members\n\n\n\n\nResponse Example\n\n\nHTTP/1.1 200 OK\n\n\n\n\n[\n  {\n    \nName\n: \ndkron1\n,\n    \nAddr\n: \n10.0.0.1\n,\n    \nPort\n: 5001,\n    \nTags\n: {\n      \nrole\n: \nweb\n,\n      \nserver\n: \ntrue\n\n    },\n    \nStatus\n: 1,\n    \nProtocolMin\n: 1,\n    \nProtocolMax\n: 2,\n    \nProtocolCur\n: 2,\n    \nDelegateMin\n: 2,\n    \nDelegateMax\n: 4,\n    \nDelegateCur\n: 4\n  }\n]\n\n\n\n\nMember Leader\n\n\nShow leader member.\n\n\nGET /v1/leader\n\n\n\n\nCurl Example\n\n\n$ curl -n dkron-node:8080/v1/leader\n\n\n\n\nResponse Example\n\n\nHTTP/1.1 200 OK\n\n\n\n\n{\n  \nName\n: \ndkron1\n,\n  \nAddr\n: \n10.0.0.1\n,\n  \nPort\n: 5001,\n  \nTags\n: {\n    \nrole\n: \nweb\n,\n    \nserver\n: \ntrue\n\n  },\n  \nStatus\n: 1,\n  \nProtocolMin\n: 1,\n  \nProtocolMax\n: 2,\n  \nProtocolCur\n: 2,\n  \nDelegateMin\n: 2,\n  \nDelegateMax\n: 4,\n  \nDelegateCur\n: 4\n}\n\n\n\n\nExecution\n\n\nAn execution represents a timed job run.\n\n\nAttributes\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\njob_name\n\n\nstring\n\n\njob name\n\n\n\"cron_job\"\n\n\n\n\n\n\nstarted_at\n\n\ndate-time\n\n\nstart time of the execution\n\n\n\"2012-01-01T12:00:00Z\"\n\n\n\n\n\n\nfinished_at\n\n\ndate-time\n\n\nwhen the execution finished running\n\n\n\"2012-01-01T12:00:00Z\"\n\n\n\n\n\n\nsuccess\n\n\nboolean\n\n\nthe execution run successfuly\n\n\ntrue\n\n\n\n\n\n\noutput\n\n\nstring\n\n\npartial output of the command execution\n\n\n\"Sat Sep  5 23:27:10 CEST 2015\"\n\n\n\n\n\n\nnode_name\n\n\nstring\n\n\nname of the node that executed the command\n\n\n\"dkron-node1\"\n\n\n\n\n\n\n\n\nExecution List\n\n\nList executions.\n\n\nGET /v1/executions/{execution_job_name}\n\n\n\n\nCurl Example\n\n\n$ curl -n dkron-node:8080/v1/executions/$EXECUTION_JOB_NAME\n\n\n\n\nResponse Example\n\n\nHTTP/1.1 200 OK\n\n\n\n\n[\n  {\n    \njob_name\n: \ncron_job\n,\n    \nstarted_at\n: \n2012-01-01T12:00:00Z\n,\n    \nfinished_at\n: \n2012-01-01T12:00:00Z\n,\n    \nsuccess\n: true,\n    \noutput\n: \nSat Sep  5 23:27:10 CEST 2015\n,\n    \nnode_name\n: \ndkron-node1\n\n  }\n]", 
            "title": "Api"
        }, 
        {
            "location": "/docs/api/#rest-api", 
            "text": "You can communicate with dkron using a RESTful JSON API over HTTP. dkron nodes usually listen on port  8080  for API requests. All examples in this section assume that you've found a running leader at  dkron-node:8080 .  dkron implements a RESTful JSON API over HTTP to communicate with software clients. dkron listens in port  8080  by default. All examples in this section assume that you're using the default port.  Default API responses are unformatted JSON add  ?pretty  to the URL call to format the response.", 
            "title": "REST API"
        }, 
        {
            "location": "/docs/api/#status", 
            "text": "Status represents details about the node.  Attributes     Name  Type  Description  Example      agent  object  Node basic details  {\"name\":\"dkron2\",\"version\":\"0.0.4\"}    serf  object  Serf status  {\"encrypted\":\"false\",\"...\":\"...\"}    tags  object  Tags asociated with this node  {\"role\":\"web\",\"server\":\"true\"}     Status  Status.  GET /v1/  Curl Example  $ curl -n dkron-node:8080/v1/  Response Example  HTTP/1.1 200 OK  {\n   agent : {\n     name :  dkron2 ,\n     version :  0.0.4 \n  },\n   serf : {\n     encrypted :  false ,\n     ... :  ... \n  },\n   tags : {\n     role :  web ,\n     server :  true \n  }\n}", 
            "title": "Status"
        }, 
        {
            "location": "/docs/api/#job", 
            "text": "A Job represents a scheduled task to execute.  Attributes     Name  Type  Description  Example      name  string  job name  \"cron_job\"    schedule  string  cron expression for the job  \"0 30 * * * *\"    command  string  command to run. Must be a shell command to execute  \"/usr/bin/date\"    owner  string  owner of the job  \"John Doe\"    owner_email  email  email of the owner  \"john@doe.com\"    run_as_user  hostname  the user to use to run the job  \"johndoe\"    success_count  integer  number of successful executions  20    error_count  integer  number of failed executions  5    last_success  date-time  last time this job executed successfully  \"0001-01-01T00:00:00Z\"    last_error  date-time  last time this job failed  \"0001-01-01T100:00:00Z\"    disabled  boolean  disabled state of the job  false    tags  object  tags of the target server to run this job  {\"role\":\"web\"}     Job Create or update  Create or updates a new job.  POST /v1/jobs  Required Parameters     Name  Type  Description  Example      name  string  job name  \"cron_job\"    schedule  string  cron expression for the job  \"0 30 * * * *\"    command  string  command to run. Must be a shell command to execute  \"/usr/bin/date\"     Optional Parameters     Name  Type  Description  Example      owner  string  owner of the job  \"John Doe\"    owner_email  email  email of the owner  \"john@doe.com\"    run_as_user  hostname  the user to use to run the job  \"johndoe\"    disabled  boolean  disabled state of the job  false    tags  object  tags of the target server to run this job  {\"role\":\"web\"}     Curl Example  $ curl -n -X POST dkron-node:8080/v1/jobs \\\n  -H  Content-Type: application/json  \\\n \\\n  -d '{\n   name :  cron_job ,\n   schedule :  0 30 * * * * ,\n   command :  /usr/bin/date ,\n   owner :  John Doe ,\n   owner_email :  john@doe.com ,\n   run_as_user :  johndoe ,\n   disabled : false,\n   tags : {\n     role :  web \n  }\n}'  Response Example  HTTP/1.1 201 Created  {\n   name :  cron_job ,\n   schedule :  0 30 * * * * ,\n   command :  /usr/bin/date ,\n   owner :  John Doe ,\n   owner_email :  john@doe.com ,\n   run_as_user :  johndoe ,\n   success_count : 20,\n   error_count : 5,\n   last_success :  0001-01-01T00:00:00Z ,\n   last_error :  0001-01-01T100:00:00Z ,\n   disabled : false,\n   tags : {\n     role :  web \n  }\n}  Job Show  Show job.  GET /v1/jobs/{job_name}  Curl Example  $ curl -n dkron-node:8080/v1/jobs/$JOB_NAME  Response Example  HTTP/1.1 200 OK  {\n   name :  cron_job ,\n   schedule :  0 30 * * * * ,\n   command :  /usr/bin/date ,\n   owner :  John Doe ,\n   owner_email :  john@doe.com ,\n   run_as_user :  johndoe ,\n   success_count : 20,\n   error_count : 5,\n   last_success :  0001-01-01T00:00:00Z ,\n   last_error :  0001-01-01T100:00:00Z ,\n   disabled : false,\n   tags : {\n     role :  web \n  }\n}  Job Delete  Delete job.  DELETE /v1/jobs/{job_name}  Curl Example  $ curl -n -X DELETE dkron-node:8080/v1/jobs/$JOB_NAME \\\n  -H  Content-Type: application/json  \\  Response Example  HTTP/1.1 200 OK  {\n   name :  cron_job ,\n   schedule :  0 30 * * * * ,\n   command :  /usr/bin/date ,\n   owner :  John Doe ,\n   owner_email :  john@doe.com ,\n   run_as_user :  johndoe ,\n   success_count : 20,\n   error_count : 5,\n   last_success :  0001-01-01T00:00:00Z ,\n   last_error :  0001-01-01T100:00:00Z ,\n   disabled : false,\n   tags : {\n     role :  web \n  }\n}  Job List  List jobs.  GET /v1/jobs  Curl Example  $ curl -n dkron-node:8080/v1/jobs  Response Example  HTTP/1.1 200 OK  [\n  {\n     name :  cron_job ,\n     schedule :  0 30 * * * * ,\n     command :  /usr/bin/date ,\n     owner :  John Doe ,\n     owner_email :  john@doe.com ,\n     run_as_user :  johndoe ,\n     success_count : 20,\n     error_count : 5,\n     last_success :  0001-01-01T00:00:00Z ,\n     last_error :  0001-01-01T100:00:00Z ,\n     disabled : false,\n     tags : {\n       role :  web \n    }\n  }\n]  Job Run  Run job.  POST /v1/jobs/{job_name}  Curl Example  $ curl -n -X POST dkron-node:8080/v1/jobs/$JOB_NAME \\\n  -H  Content-Type: application/json  \\  Response Example  HTTP/1.1 200 OK  {\n   name :  cron_job ,\n   schedule :  0 30 * * * * ,\n   command :  /usr/bin/date ,\n   owner :  John Doe ,\n   owner_email :  john@doe.com ,\n   run_as_user :  johndoe ,\n   success_count : 20,\n   error_count : 5,\n   last_success :  0001-01-01T00:00:00Z ,\n   last_error :  0001-01-01T100:00:00Z ,\n   disabled : false,\n   tags : {\n     role :  web \n  }\n}", 
            "title": "Job"
        }, 
        {
            "location": "/docs/api/#member", 
            "text": "A member represents a cluster member node.  Attributes     Name  Type  Description  Example      Name  boolean  Node name  \"dkron1\"    Addr  string  IP Address  \"10.0.0.1\"    Port  integer  Port number  5001    Tags  object  Tags asociated with this node  {\"role\":\"web\",\"server\":\"true\"}    Status  integer  The serf status of the node see: https://godoc.org/github.com/hashicorp/serf/serf#MemberStatus  1    ProtocolMin  integer  Serf protocol minimum version this node can understand or speak  1    ProtocolMax  integer  Serf protocol minimum version this node can understand or speak  2    ProtocolCur  integer  Serf protocol current version this node can understand or speak  2    DelegateMin  integer  Serf delegate protocol minimum version this node can understand or speak  2    DelegateMax  integer  Serf delegate protocol minimum version this node can understand or speak  4    DelegateCur  integer  Serf delegate protocol minimum version this node can understand or speak  4     Member List  List members.  GET /v1/members  Curl Example  $ curl -n dkron-node:8080/v1/members  Response Example  HTTP/1.1 200 OK  [\n  {\n     Name :  dkron1 ,\n     Addr :  10.0.0.1 ,\n     Port : 5001,\n     Tags : {\n       role :  web ,\n       server :  true \n    },\n     Status : 1,\n     ProtocolMin : 1,\n     ProtocolMax : 2,\n     ProtocolCur : 2,\n     DelegateMin : 2,\n     DelegateMax : 4,\n     DelegateCur : 4\n  }\n]  Member Leader  Show leader member.  GET /v1/leader  Curl Example  $ curl -n dkron-node:8080/v1/leader  Response Example  HTTP/1.1 200 OK  {\n   Name :  dkron1 ,\n   Addr :  10.0.0.1 ,\n   Port : 5001,\n   Tags : {\n     role :  web ,\n     server :  true \n  },\n   Status : 1,\n   ProtocolMin : 1,\n   ProtocolMax : 2,\n   ProtocolCur : 2,\n   DelegateMin : 2,\n   DelegateMax : 4,\n   DelegateCur : 4\n}", 
            "title": "Member"
        }, 
        {
            "location": "/docs/api/#execution", 
            "text": "An execution represents a timed job run.  Attributes     Name  Type  Description  Example      job_name  string  job name  \"cron_job\"    started_at  date-time  start time of the execution  \"2012-01-01T12:00:00Z\"    finished_at  date-time  when the execution finished running  \"2012-01-01T12:00:00Z\"    success  boolean  the execution run successfuly  true    output  string  partial output of the command execution  \"Sat Sep  5 23:27:10 CEST 2015\"    node_name  string  name of the node that executed the command  \"dkron-node1\"     Execution List  List executions.  GET /v1/executions/{execution_job_name}  Curl Example  $ curl -n dkron-node:8080/v1/executions/$EXECUTION_JOB_NAME  Response Example  HTTP/1.1 200 OK  [\n  {\n     job_name :  cron_job ,\n     started_at :  2012-01-01T12:00:00Z ,\n     finished_at :  2012-01-01T12:00:00Z ,\n     success : true,\n     output :  Sat Sep  5 23:27:10 CEST 2015 ,\n     node_name :  dkron-node1 \n  }\n]", 
            "title": "Execution"
        }, 
        {
            "location": "/about/dkron_vs_other_software/", 
            "text": "Dkron vs. Other Software\n\n\nDkron vs. Chronos\n\n\nAirbnb's Chronos is a job scheduler that is similar to dkron, it's distributed and fault tolerant thanks to the use of Zookeeper and Apache Mesos.\n\n\nIt has a lot of nice features, like task dependencies, etc.\n\n\nIf you don't have/want to run a Mesos cluster and deal with the not easy configuration and maintenance of Zookeeper and you want something lighter, Dkron could help you.\n\n\nDkron vs. Rundeck\n\n\nRundeck is a popular and mature platform to automate operations and schedule jobs.\n\n\nIt has cool features:\n\n\n\n\nAgentless\n\n\nPermissions and auditing\n\n\n\n\nIt's written in Java and it's not trivial to setup right.\n\n\nIt uses a central database to store job execution results and configuration data, that makes it vulnerable to failures and you need to care yourself of providing it an HA environement or database to run and that's not an easy task to do with the Rundeck's supported databases.\n\n\nDkron lacks some of it's features but it's lightweight and fault-tolerant out-of-the-box.", 
            "title": "Dkron vs other software"
        }, 
        {
            "location": "/about/dkron_vs_other_software/#dkron-vs-other-software", 
            "text": "", 
            "title": "Dkron vs. Other Software"
        }, 
        {
            "location": "/about/dkron_vs_other_software/#dkron-vs-chronos", 
            "text": "Airbnb's Chronos is a job scheduler that is similar to dkron, it's distributed and fault tolerant thanks to the use of Zookeeper and Apache Mesos.  It has a lot of nice features, like task dependencies, etc.  If you don't have/want to run a Mesos cluster and deal with the not easy configuration and maintenance of Zookeeper and you want something lighter, Dkron could help you.", 
            "title": "Dkron vs. Chronos"
        }, 
        {
            "location": "/about/dkron_vs_other_software/#dkron-vs-rundeck", 
            "text": "Rundeck is a popular and mature platform to automate operations and schedule jobs.  It has cool features:   Agentless  Permissions and auditing   It's written in Java and it's not trivial to setup right.  It uses a central database to store job execution results and configuration data, that makes it vulnerable to failures and you need to care yourself of providing it an HA environement or database to run and that's not an easy task to do with the Rundeck's supported databases.  Dkron lacks some of it's features but it's lightweight and fault-tolerant out-of-the-box.", 
            "title": "Dkron vs. Rundeck"
        }, 
        {
            "location": "/about/license/", 
            "text": "License\n\n\nCopyright (c) Victor Castell\n\n\nDkron is an Open Source project licensed under the terms of\nthe LGPLv3 license.  Please see \nhttp://www.gnu.org/licenses/lgpl-3.0.html\n\nfor license text.", 
            "title": "License"
        }, 
        {
            "location": "/about/license/#license", 
            "text": "Copyright (c) Victor Castell  Dkron is an Open Source project licensed under the terms of\nthe LGPLv3 license.  Please see  http://www.gnu.org/licenses/lgpl-3.0.html \nfor license text.", 
            "title": "License"
        }
    ]
}