{
    "docs": [
        {
            "location": "/", 
            "text": "Characteristics\n\n\n  \n\n    \n\n    \n\n      \nEasy integration\n\n      \nDkron is easy to setup and use. Choose your OS package and it's ready to run out-of-the-box. The administration panel and it's simple JSON API makes a breeze to integrate with you current workflow or deploy system.\n\n    \n\n  \n\n\n  \n\n    \n\n    \n\n      \nAlways available\n\n      \nUsing the power of distributed key-value stores, Dkron is designed to be always available. If the leader node fails, a follower will replace it, all without human intervention.\n\n    \n\n  \n\n\n  \n\n    \n\n    \n\n      \nFlexible targets\n\n      \nSimple but powerful tag-based target node selection for jobs. Tag node count allows to run jobs in an arbitrary number nodes in the same group or groups.", 
            "title": "Home"
        }, 
        {
            "location": "/intro/", 
            "text": "Dkron - Distributed, fault tolerant job scheduling system\n\n\nWelcome to the Dkron documentation! This is the reference guide on how to use Dkron. If you want a getting started guide refer to the \ngetting started guide\n.\n\n\nWhat is Dkron\n\n\nDkron it's distributed system to run scheduled jobs against a server or a group of servers of any size. One of the machines is the leader and the others will be followers. If the leader fails or becomes unreachable, any other one will take over and reschedule all jobs to keep the system healthy.\n\n\nIn case the old leader becomes alive again, it'll become a follower.\n\n\nDkron is a distributed cron drop-in replacement, easy to setup and fault tolerant with focus in:\n\n\n\n\nEasy: Easy to use with a great UI\n\n\nReliable: Completely fault tolerant\n\n\nHigh scalable: Able to handle high volumes of scheduled jobs and thousands of nodes\n\n\n\n\nDkron is written in Go and leverage the power of distributed key value stores and \nSerf\n for providing fault tolerance, reliability and scalability while keeping simple and easily installable.\n\n\nDkron is inspired by the google whitepaper \nReliable Cron across the Planet\n\n\nDkron runs on Linux, OSX and Windows. It can be used to run scheduled commands on a server cluster using any combination of servers for each job. It has no single points of failure due to the use of the fault tolerant distributed databases and can work at large scale thanks to the efficient and lightweight gossip protocol.\n\n\nDkron uses the efficient and lightweight \ngossip protocol\n underneath to communicate with nodes. Failure notification and task handling are run efficiently across an entire cluster of any size.\n\n\n\n\n\n\n\n\nDkron design\n\n\nDkron is designed to solve one problem well, executing commands in given intervals. Following the unix philosophy of doing one thing and doing it well (like the battle-tested cron) but with the given addition of being designed for the cloud era, removing single points of failure in environments where scheduled jobs are needed to be run in multiple servers.", 
            "title": "Intro"
        }, 
        {
            "location": "/intro/#dkron-distributed-fault-tolerant-job-scheduling-system", 
            "text": "Welcome to the Dkron documentation! This is the reference guide on how to use Dkron. If you want a getting started guide refer to the  getting started guide .", 
            "title": "Dkron - Distributed, fault tolerant job scheduling system"
        }, 
        {
            "location": "/intro/#what-is-dkron", 
            "text": "Dkron it's distributed system to run scheduled jobs against a server or a group of servers of any size. One of the machines is the leader and the others will be followers. If the leader fails or becomes unreachable, any other one will take over and reschedule all jobs to keep the system healthy.  In case the old leader becomes alive again, it'll become a follower.  Dkron is a distributed cron drop-in replacement, easy to setup and fault tolerant with focus in:   Easy: Easy to use with a great UI  Reliable: Completely fault tolerant  High scalable: Able to handle high volumes of scheduled jobs and thousands of nodes   Dkron is written in Go and leverage the power of distributed key value stores and  Serf  for providing fault tolerance, reliability and scalability while keeping simple and easily installable.  Dkron is inspired by the google whitepaper  Reliable Cron across the Planet  Dkron runs on Linux, OSX and Windows. It can be used to run scheduled commands on a server cluster using any combination of servers for each job. It has no single points of failure due to the use of the fault tolerant distributed databases and can work at large scale thanks to the efficient and lightweight gossip protocol.  Dkron uses the efficient and lightweight  gossip protocol  underneath to communicate with nodes. Failure notification and task handling are run efficiently across an entire cluster of any size.", 
            "title": "What is Dkron"
        }, 
        {
            "location": "/intro/#dkron-design", 
            "text": "Dkron is designed to solve one problem well, executing commands in given intervals. Following the unix philosophy of doing one thing and doing it well (like the battle-tested cron) but with the given addition of being designed for the cloud era, removing single points of failure in environments where scheduled jobs are needed to be run in multiple servers.", 
            "title": "Dkron design"
        }, 
        {
            "location": "/docs/getting-started/", 
            "text": "Getting started\n\n\nWelcome to the intro guide to dkron! This will explain how to setup dkron, how easy is to use it, what problems could it help you to solve, etc.\n\n\nIntroduction\n\n\nDkron nodes can work in two modes, agents or servers.\n\n\nServers are agents too. You can use servers to run jobs.\n\n\nThe main distinction is that servers order job executions and can be used to schedule jobs.\n\n\nDkron clusters have a leader, the leader is responsible of executing jobs in the cluster.\n\n\nAny Dkron agent or server acts as a cluster member and it's available to run scheduled tasks.\n\n\nYou can choose whether a job is run on a node or nodes by specifying tags and a count of target nodes having this tag do you want a job to run. This gives an unprecedented level of flexibility in runnig jobs across a cluster of any size and with any combination of machines you need.\n\n\nAll the execution responses will be gathered by the scheduler and stored in the database.\n\n\nRequirements\n\n\nDkron relies on the key-value store for data storage, you can run an instance of the distributed store in the same machines as Dkron or connect it to your existing cluster.\n\n\nIt can use etcd, Consul or Zookeeper as data stores. To install any of this systems got to their web site:\n\n\n\n\netcd\n\n\nConsul\n\n\nZooKeeper\n\n\n\n\nInstallation\n\n\nSimply download the packaged archive for your platform from the \ndownloads page\n, extract the package to a shared location in your drive, like \n/opt/local\n and run it from there.\n\n\nThere's a \n.deb\n package available too.\n\n\nUbuntu\n\n\nThe recommended way to install Dkron is using the \n.deb\n package.\n\n\nDebian\n\n\nSample init scripts are included in the \ndebian\n folder\n\n\nConfiguration\n\n\nSee the \nconfiguration section\n.\n\n\nUsage\n\n\nBy default Dkron uses the following ports:\n\n\n\n\n8946\n for communicating between agents\n\n\n8080\n for HTTP for the API and Dashboard\n\n\n6868\n for RPC comunication between clients.\n\n\n\n\nBe sure you have opened this ports (or the ones that you configured) in your firewall or AWS security groups.\n\n\nBy default dkron will try to use a local etcd server running in the same machine and in the default port. You can specify the store by setting the \nbackend\n and \nbackend-machines\n flag in the config file, env variables or as a command line flag.\n\n\nTo start a Dkron server instance just run:\n\n\ndkron agent -server", 
            "title": "Getting started"
        }, 
        {
            "location": "/docs/getting-started/#getting-started", 
            "text": "Welcome to the intro guide to dkron! This will explain how to setup dkron, how easy is to use it, what problems could it help you to solve, etc.", 
            "title": "Getting started"
        }, 
        {
            "location": "/docs/getting-started/#introduction", 
            "text": "Dkron nodes can work in two modes, agents or servers.  Servers are agents too. You can use servers to run jobs.  The main distinction is that servers order job executions and can be used to schedule jobs.  Dkron clusters have a leader, the leader is responsible of executing jobs in the cluster.  Any Dkron agent or server acts as a cluster member and it's available to run scheduled tasks.  You can choose whether a job is run on a node or nodes by specifying tags and a count of target nodes having this tag do you want a job to run. This gives an unprecedented level of flexibility in runnig jobs across a cluster of any size and with any combination of machines you need.  All the execution responses will be gathered by the scheduler and stored in the database.", 
            "title": "Introduction"
        }, 
        {
            "location": "/docs/getting-started/#requirements", 
            "text": "Dkron relies on the key-value store for data storage, you can run an instance of the distributed store in the same machines as Dkron or connect it to your existing cluster.  It can use etcd, Consul or Zookeeper as data stores. To install any of this systems got to their web site:   etcd  Consul  ZooKeeper", 
            "title": "Requirements"
        }, 
        {
            "location": "/docs/getting-started/#installation", 
            "text": "Simply download the packaged archive for your platform from the  downloads page , extract the package to a shared location in your drive, like  /opt/local  and run it from there.  There's a  .deb  package available too.  Ubuntu  The recommended way to install Dkron is using the  .deb  package.  Debian  Sample init scripts are included in the  debian  folder", 
            "title": "Installation"
        }, 
        {
            "location": "/docs/getting-started/#configuration", 
            "text": "See the  configuration section .", 
            "title": "Configuration"
        }, 
        {
            "location": "/docs/getting-started/#usage", 
            "text": "By default Dkron uses the following ports:   8946  for communicating between agents  8080  for HTTP for the API and Dashboard  6868  for RPC comunication between clients.   Be sure you have opened this ports (or the ones that you configured) in your firewall or AWS security groups.  By default dkron will try to use a local etcd server running in the same machine and in the default port. You can specify the store by setting the  backend  and  backend-machines  flag in the config file, env variables or as a command line flag.  To start a Dkron server instance just run:  dkron agent -server", 
            "title": "Usage"
        }, 
        {
            "location": "/docs/guides/", 
            "text": "Guides\n\n\nTarget nodes spec\n\n\nYou can choose whether a job is run on a node or nodes by specifying tags and a count of target nodes having this tag do you want a job to run.\n\n\nExamples:\n\n\nTarget all nodes with a tag:\n\n\n{\n    \nname\n: \njob_name\n,\n    \ncommand\n: \n/bin/true\n,\n    \nschedule\n: \n@every 2m\n,\n    \ntags\n: {\n        \nrole\n: \nweb\n\n    }\n}\n\n\n\n\nTarget only two nodes of a group of nodes with a tag:\n\n\n{\n    \nname\n: \njob_name\n,\n    \ncommand\n: \n/bin/true\n,\n    \nschedule\n: \n@every 2m\n,\n    \ntags\n: {\n        \nrole\n: \nweb:2\n\n    }\n}\n\n\n\n\nDkron will try to run the job in the amount of nodes indicated by that count having that tag.\n\n\nCRON Expression Format\n\n\nA cron expression represents a set of times, using 6 space-separated fields.\n\n\nField name   | Mandatory? | Allowed values  | Allowed special characters\n----------   | ---------- | --------------  | --------------------------\nSeconds      | Yes        | 0-59            | * / , -\nMinutes      | Yes        | 0-59            | * / , -\nHours        | Yes        | 0-23            | * / , -\nDay of month | Yes        | 1-31            | * / , - ?\nMonth        | Yes        | 1-12 or JAN-DEC | * / , -\nDay of week  | Yes        | 0-6 or SUN-SAT  | * / , - ?\n\n\n\nNote: Month and Day-of-week field values are case insensitive.  \"SUN\", \"Sun\",\nand \"sun\" are equally accepted.\n\n\nSpecial Characters\n\n\nAsterisk ( * )\n\n\nThe asterisk indicates that the cron expression will match for all values of the\nfield; e.g., using an asterisk in the 5th field (month) would indicate every\nmonth.\n\n\nSlash ( / )\n\n\nSlashes are used to describe increments of ranges. For example 3-59/15 in the\n1st field (minutes) would indicate the 3rd minute of the hour and every 15\nminutes thereafter. The form \"*\\/...\" is equivalent to the form \"first-last/...\",\nthat is, an increment over the largest possible range of the field.  The form\n\"N/...\" is accepted as meaning \"N-MAX/...\", that is, starting at N, use the\nincrement until the end of that specific range.  It does not wrap around.\n\n\nComma ( , )\n\n\nCommas are used to separate items of a list. For example, using \"MON,WED,FRI\" in\nthe 5th field (day of week) would mean Mondays, Wednesdays and Fridays.\n\n\nHyphen ( - )\n\n\nHyphens are used to define ranges. For example, 9-17 would indicate every\nhour between 9am and 5pm inclusive.\n\n\nQuestion mark ( ? )\n\n\nQuestion mark may be used instead of '*' for leaving either day-of-month or\nday-of-week blank.\n\n\nPredefined schedules\n\n\nYou may use one of several pre-defined schedules in place of a cron expression.\n\n\nEntry                  | Description                                | Equivalent To\n-----                  | -----------                                | -------------\n@yearly (or @annually) | Run once a year, midnight, Jan. 1st        | 0 0 0 1 1 *\n@monthly               | Run once a month, midnight, first of month | 0 0 0 1 * *\n@weekly                | Run once a week, midnight on Sunday        | 0 0 0 * * 0\n@daily (or @midnight)  | Run once a day, midnight                   | 0 0 0 * * *\n@hourly                | Run once an hour, beginning of hour        | 0 0 * * * *\n@minutely              | Run once a minute, beginning of minute     | 0 * * * * *\n\n\n\nIntervals\n\n\nYou may also schedule a job to execute at fixed intervals.  This is supported by\nformatting the cron spec like this:\n\n\n@every \nduration\n\n\n\n\nwhere \"duration\" is a string accepted by time.ParseDuration\n(http://golang.org/pkg/time/#ParseDuration).\n\n\nFor example, \"@every 1h30m10s\" would indicate a schedule that activates every\n1 hour, 30 minutes, 10 seconds.\n\n\nNote: The interval does not take the job runtime into account.  For example,\nif a job takes 3 minutes to run, and it is scheduled to run every 5 minutes,\nit will have only 2 minutes of idle time between each run.\n\n\nFixed times\n\n\nYou may also want to schedule a job to be executed once. This is supported by\nformatting the cron spec like this:\n\n\n@at \ndatetime\n\n\n\n\nWhere \"datetime\" is a string accepted by time.Parse in RFC3339 format\n(https://golang.org/pkg/time/#Parse).\n\n\nFor example, \"@at 2018-01-02T15:04:00Z\" would run the job on the specified date and time\nassuming UTC timezone.\n\n\nTime zones\n\n\nAll interpretation and scheduling is done in the machine's local time zone (as\nprovided by the Go time package (http://www.golang.org/pkg/time).\n\n\nBe aware that jobs scheduled during daylight-savings leap-ahead transitions will\nnot be run!\n\n\nJob chaining\n\n\nYou can set some jobs to run after other job is executed. To setup a job that will be executed after any other given job, just set the \nparent_job\n property when saving the new job.\n\n\nThe dependent job will be executed after the main job finished a successful execution.", 
            "title": "Guides"
        }, 
        {
            "location": "/docs/guides/#guides", 
            "text": "", 
            "title": "Guides"
        }, 
        {
            "location": "/docs/guides/#target-nodes-spec", 
            "text": "You can choose whether a job is run on a node or nodes by specifying tags and a count of target nodes having this tag do you want a job to run.  Examples:  Target all nodes with a tag:  {\n     name :  job_name ,\n     command :  /bin/true ,\n     schedule :  @every 2m ,\n     tags : {\n         role :  web \n    }\n}  Target only two nodes of a group of nodes with a tag:  {\n     name :  job_name ,\n     command :  /bin/true ,\n     schedule :  @every 2m ,\n     tags : {\n         role :  web:2 \n    }\n}  Dkron will try to run the job in the amount of nodes indicated by that count having that tag.", 
            "title": "Target nodes spec"
        }, 
        {
            "location": "/docs/guides/#cron-expression-format", 
            "text": "A cron expression represents a set of times, using 6 space-separated fields.  Field name   | Mandatory? | Allowed values  | Allowed special characters\n----------   | ---------- | --------------  | --------------------------\nSeconds      | Yes        | 0-59            | * / , -\nMinutes      | Yes        | 0-59            | * / , -\nHours        | Yes        | 0-23            | * / , -\nDay of month | Yes        | 1-31            | * / , - ?\nMonth        | Yes        | 1-12 or JAN-DEC | * / , -\nDay of week  | Yes        | 0-6 or SUN-SAT  | * / , - ?  Note: Month and Day-of-week field values are case insensitive.  \"SUN\", \"Sun\",\nand \"sun\" are equally accepted.  Special Characters  Asterisk ( * )  The asterisk indicates that the cron expression will match for all values of the\nfield; e.g., using an asterisk in the 5th field (month) would indicate every\nmonth.  Slash ( / )  Slashes are used to describe increments of ranges. For example 3-59/15 in the\n1st field (minutes) would indicate the 3rd minute of the hour and every 15\nminutes thereafter. The form \"*\\/...\" is equivalent to the form \"first-last/...\",\nthat is, an increment over the largest possible range of the field.  The form\n\"N/...\" is accepted as meaning \"N-MAX/...\", that is, starting at N, use the\nincrement until the end of that specific range.  It does not wrap around.  Comma ( , )  Commas are used to separate items of a list. For example, using \"MON,WED,FRI\" in\nthe 5th field (day of week) would mean Mondays, Wednesdays and Fridays.  Hyphen ( - )  Hyphens are used to define ranges. For example, 9-17 would indicate every\nhour between 9am and 5pm inclusive.  Question mark ( ? )  Question mark may be used instead of '*' for leaving either day-of-month or\nday-of-week blank.  Predefined schedules  You may use one of several pre-defined schedules in place of a cron expression.  Entry                  | Description                                | Equivalent To\n-----                  | -----------                                | -------------\n@yearly (or @annually) | Run once a year, midnight, Jan. 1st        | 0 0 0 1 1 *\n@monthly               | Run once a month, midnight, first of month | 0 0 0 1 * *\n@weekly                | Run once a week, midnight on Sunday        | 0 0 0 * * 0\n@daily (or @midnight)  | Run once a day, midnight                   | 0 0 0 * * *\n@hourly                | Run once an hour, beginning of hour        | 0 0 * * * *\n@minutely              | Run once a minute, beginning of minute     | 0 * * * * *  Intervals  You may also schedule a job to execute at fixed intervals.  This is supported by\nformatting the cron spec like this:  @every  duration   where \"duration\" is a string accepted by time.ParseDuration\n(http://golang.org/pkg/time/#ParseDuration).  For example, \"@every 1h30m10s\" would indicate a schedule that activates every\n1 hour, 30 minutes, 10 seconds.  Note: The interval does not take the job runtime into account.  For example,\nif a job takes 3 minutes to run, and it is scheduled to run every 5 minutes,\nit will have only 2 minutes of idle time between each run.  Fixed times  You may also want to schedule a job to be executed once. This is supported by\nformatting the cron spec like this:  @at  datetime   Where \"datetime\" is a string accepted by time.Parse in RFC3339 format\n(https://golang.org/pkg/time/#Parse).  For example, \"@at 2018-01-02T15:04:00Z\" would run the job on the specified date and time\nassuming UTC timezone.  Time zones  All interpretation and scheduling is done in the machine's local time zone (as\nprovided by the Go time package (http://www.golang.org/pkg/time).  Be aware that jobs scheduled during daylight-savings leap-ahead transitions will\nnot be run!", 
            "title": "CRON Expression Format"
        }, 
        {
            "location": "/docs/guides/#job-chaining", 
            "text": "You can set some jobs to run after other job is executed. To setup a job that will be executed after any other given job, just set the  parent_job  property when saving the new job.  The dependent job will be executed after the main job finished a successful execution.", 
            "title": "Job chaining"
        }, 
        {
            "location": "/docs/configuration/", 
            "text": "Configuration\n\n\nSettings for dkron can be specified in three ways: Using a \nconfig/dkron.json\n config file, using env variables starting with \nDKRON_\n or using command line arguments.\n\n\nCommand line options\n\n\n\n\n\n\n-node\n - Name of the node, must be unique in the cluster. By default this is the hostname of the machine.\n\n\n\n\n\n\n-bind\n - The address that dkron will bind to for communication with other dkron nodes. By default this is \"0.0.0.0:8946\". dkron nodes may have different ports. If a join is specified without a port, we default to locally configured port. dkron uses both TCP and UDP and use the same port for both, so if you have any firewalls be sure to allow both protocols. If this configuration value is changed and no port is specified, the default of \"8946\" will be used.\n\n\n\n\n\n\n-join\n - Address of another agent to join upon starting up. This can be specified multiple times to specify multiple agents to join. If Dkron is unable to join with any of the specified addresses, agent startup will fail. By default, the agent won't join any nodes when it starts up.\n\n\n\n\n\n\n-advertise\n - The advertise flag is used to change the address that we advertise to other nodes in the cluster. By default, the bind address is advertised. However, in some cases (specifically NAT traversal), there may be a routable address that cannot be bound to. This flag enables gossiping a different address to support this. If this address is not routable, the node will be in a constant flapping state, as other nodes will treat the non-routability as a failure.\n\n\n\n\n\n\n-http-addr\n - The address where the web UI will be binded. By default \n:8080\n\n\n\n\n\n\n-backend\n - Backend storage to use, etcd, consul or zk (zookeeper). The default is etcd.\n\n\n\n\n\n\n-backend-machine\n - Backend storage servers addresses to connect to. This flag can be specified multiple times. By default \n127.0.0.1:2379\n\n\n\n\n\n\n-tag\n - The tag flag is used to associate a new key/value pair with the agent. The tags are gossiped and can be used to provide additional information such as roles, ports, and configuration values to other nodes. Multiple tags can be specified per agent. There is a byte size limit for the maximum number of tags, but in practice dozens of tags may be used. Tags can be changed during a config reload.\n\n\n\n\n\n\n-server\n - If this agent is a dkron server, just need to be present. Absent by default.\n\n\n\n\n\n\n-keyspace\n - Keyspace to use for the store. Allows to run different instances using the same storage cluster. \ndkron\n by default.\n\n\n\n\n\n\n-encrypt\n - Key for encrypting network traffic. Must be a base64-encoded 16-byte key.\n\n\n\n\n\n\n-mail-host\n - Mail server host address to use for notifications.\n\n\n\n\n\n\n-mail-port\n - Mail server port.\n\n\n\n\n\n\n-mail-username\n - Mail server username used for authentication.\n\n\n\n\n\n\n-mail-password\n - Mail server password to use.\n\n\n\n\n\n\n-mail-from\n - From email address to use.\n\n\n\n\n\n\n-webhook-url\n - Webhook url to call for notifications.\n\n\n\n\n\n\n-webhook-payload\n - Body of the POST request to send on webhook call.\n\n\n\n\n\n\n-webhook-header\n - Headers to use when calling the webhook URL. Can be specified multiple times.\n\n\n\n\n\n\n-log-level\n - Set the log level (debug, info, warn, error, fatal, panic). Defaults to \"info\"\n\n\n\n\n\n\n-ui-dir\n - Directory from where to serve web UI.\n\n\n\n\n\n\n-rpc-port\n - The port that Dkron will use to bind for the agent's RPC server, defaults to \n6868\n. The RPC address will be the bind address.\n\n\n\n\n\n\nExample\n\n\n# Dkron example configuration file\n{\n  \nbackend\n: \netcd\n,\n  \nbackend_machine\n: \n127.0.0.1:2379\n,\n  \nadvertise_addr\n: \n192.168.50.1\n,\n  \nserver\n: false,\n  \ndebug\n: false,\n  \ntags\n: {\n    \nrole\n: \nweb\n,\n    \ndatacenter\n: \neast\n\n  },\n  \nkeyspace\n: \ndkron\n,\n  \nencrypt\n: \na-valid-key-generated-with-dkron-keygen\n,\n  \njoin\n: [\n    \n10.0.0.1\n,\n    \n10.0.0.2\n,\n    \n10.0.0.3\n\n  ],\n  \nwebhook_url\n: \nhttps://hooks.slack.com/services/XXXXXX/XXXXXXX/XXXXXXXXXXXXXXXXXXXX\n,\n  \nwebhook_payload\n: \npayload={\\\ntext\\\n: \\\n{{.Report}}\\\n, \\\nchannel\\\n: \\\n#foo\\\n}\n,\n  \nwebhook_headers\n: \nContent-Type:application/x-www-form-urlencoded\n,\n  \nmail_host\n: \nemail-smtp.eu-west-1.amazonaws.com\n,\n  \nmail_port\n: 25,\n  \nmail_username\n: \nmailuser\n,\n  \nmail_password\n: \nmailpassword\n,\n  \nmail_from\n: \ncron@example.com\n\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/docs/configuration/#configuration", 
            "text": "Settings for dkron can be specified in three ways: Using a  config/dkron.json  config file, using env variables starting with  DKRON_  or using command line arguments.", 
            "title": "Configuration"
        }, 
        {
            "location": "/docs/configuration/#command-line-options", 
            "text": "-node  - Name of the node, must be unique in the cluster. By default this is the hostname of the machine.    -bind  - The address that dkron will bind to for communication with other dkron nodes. By default this is \"0.0.0.0:8946\". dkron nodes may have different ports. If a join is specified without a port, we default to locally configured port. dkron uses both TCP and UDP and use the same port for both, so if you have any firewalls be sure to allow both protocols. If this configuration value is changed and no port is specified, the default of \"8946\" will be used.    -join  - Address of another agent to join upon starting up. This can be specified multiple times to specify multiple agents to join. If Dkron is unable to join with any of the specified addresses, agent startup will fail. By default, the agent won't join any nodes when it starts up.    -advertise  - The advertise flag is used to change the address that we advertise to other nodes in the cluster. By default, the bind address is advertised. However, in some cases (specifically NAT traversal), there may be a routable address that cannot be bound to. This flag enables gossiping a different address to support this. If this address is not routable, the node will be in a constant flapping state, as other nodes will treat the non-routability as a failure.    -http-addr  - The address where the web UI will be binded. By default  :8080    -backend  - Backend storage to use, etcd, consul or zk (zookeeper). The default is etcd.    -backend-machine  - Backend storage servers addresses to connect to. This flag can be specified multiple times. By default  127.0.0.1:2379    -tag  - The tag flag is used to associate a new key/value pair with the agent. The tags are gossiped and can be used to provide additional information such as roles, ports, and configuration values to other nodes. Multiple tags can be specified per agent. There is a byte size limit for the maximum number of tags, but in practice dozens of tags may be used. Tags can be changed during a config reload.    -server  - If this agent is a dkron server, just need to be present. Absent by default.    -keyspace  - Keyspace to use for the store. Allows to run different instances using the same storage cluster.  dkron  by default.    -encrypt  - Key for encrypting network traffic. Must be a base64-encoded 16-byte key.    -mail-host  - Mail server host address to use for notifications.    -mail-port  - Mail server port.    -mail-username  - Mail server username used for authentication.    -mail-password  - Mail server password to use.    -mail-from  - From email address to use.    -webhook-url  - Webhook url to call for notifications.    -webhook-payload  - Body of the POST request to send on webhook call.    -webhook-header  - Headers to use when calling the webhook URL. Can be specified multiple times.    -log-level  - Set the log level (debug, info, warn, error, fatal, panic). Defaults to \"info\"    -ui-dir  - Directory from where to serve web UI.    -rpc-port  - The port that Dkron will use to bind for the agent's RPC server, defaults to  6868 . The RPC address will be the bind address.", 
            "title": "Command line options"
        }, 
        {
            "location": "/docs/configuration/#example", 
            "text": "# Dkron example configuration file\n{\n   backend :  etcd ,\n   backend_machine :  127.0.0.1:2379 ,\n   advertise_addr :  192.168.50.1 ,\n   server : false,\n   debug : false,\n   tags : {\n     role :  web ,\n     datacenter :  east \n  },\n   keyspace :  dkron ,\n   encrypt :  a-valid-key-generated-with-dkron-keygen ,\n   join : [\n     10.0.0.1 ,\n     10.0.0.2 ,\n     10.0.0.3 \n  ],\n   webhook_url :  https://hooks.slack.com/services/XXXXXX/XXXXXXX/XXXXXXXXXXXXXXXXXXXX ,\n   webhook_payload :  payload={\\ text\\ : \\ {{.Report}}\\ , \\ channel\\ : \\ #foo\\ } ,\n   webhook_headers :  Content-Type:application/x-www-form-urlencoded ,\n   mail_host :  email-smtp.eu-west-1.amazonaws.com ,\n   mail_port : 25,\n   mail_username :  mailuser ,\n   mail_password :  mailpassword ,\n   mail_from :  cron@example.com \n}", 
            "title": "Example"
        }, 
        {
            "location": "/docs/api/", 
            "text": "Dkron REST API\n\n\n\n\nOverview\n\n\nYou can communicate with Dkron using a RESTful JSON API over HTTP. Dkron nodes usually listen on port \n8080\n for API requests. All examples in this section assume that you've found a running leader at \nlocalhost:8080\n.\n\n\nDkron implements a RESTful JSON API over HTTP to communicate with software clients. Dkron listens in port \n8080\n by default. All examples in this section assume that you're using the default port.\n\n\nDefault API responses are unformatted JSON add the \npretty=true\n param to format the response.\n\n\nVersion information\n\n\nVersion\n : 0.9.0\n\n\nURI scheme\n\n\nHost\n : localhost:8080\n\n\nBasePath\n : /v1\n\n\nSchemes\n : HTTP\n\n\nConsumes\n\n\n\n\napplication/json\n\n\n\n\nProduces\n\n\n\n\napplication/json\n\n\n\n\n\n\nPaths\n\n\n\n\nGET /\n\n\nDescription\n\n\nGets \nStatus\n object.\n\n\nResponses\n\n\n\n\n\n\n\n\nHTTP Code\n\n\nDescription\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\n200\n\n\nSuccessful response\n\n\nstatus\n\n\n\n\n\n\n\n\nTags\n\n\n\n\ndefault\n\n\n\n\n\n\nGET /executions/{job_name}\n\n\nDescription\n\n\nList executions.\n\n\nParameters\n\n\n\n\n\n\n\n\nType\n\n\nName\n\n\nDescription\n\n\nSchema\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nPath\n\n\njob_name\n  \nrequired\n\n\nThe job that owns the executions to be fetched.\n\n\nstring\n\n\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nHTTP Code\n\n\nDescription\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\n200\n\n\nSuccessful response\n\n\n \nexecution\n \n array\n\n\n\n\n\n\n\n\nTags\n\n\n\n\nexecutions\n\n\n\n\n\n\nGET /jobs\n\n\nDescription\n\n\nList jobs.\n\n\nResponses\n\n\n\n\n\n\n\n\nHTTP Code\n\n\nDescription\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\n200\n\n\nSuccessful response\n\n\n \njob\n \n array\n\n\n\n\n\n\n\n\nTags\n\n\n\n\njobs\n\n\n\n\n\n\nPOST /jobs\n\n\nDescription\n\n\nCreate or updates a new job.\n\n\nParameters\n\n\n\n\n\n\n\n\nType\n\n\nName\n\n\nDescription\n\n\nSchema\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nBody\n\n\nbody\n  \nrequired\n\n\nUpdated job object\n\n\njob\n\n\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nHTTP Code\n\n\nDescription\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\n201\n\n\nSuccessful response\n\n\njob\n\n\n\n\n\n\n\n\nTags\n\n\n\n\njobs\n\n\n\n\n\n\nDELETE /jobs/{job_name}\n\n\nDescription\n\n\nDelete a job.\n\n\nParameters\n\n\n\n\n\n\n\n\nType\n\n\nName\n\n\nDescription\n\n\nSchema\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nPath\n\n\njob_name\n  \nrequired\n\n\nThe job that needs to be deleted.\n\n\nstring\n\n\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nHTTP Code\n\n\nDescription\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\n200\n\n\nSuccessful response\n\n\njob\n\n\n\n\n\n\n\n\nTags\n\n\n\n\njobs\n\n\n\n\n\n\nGET /jobs/{job_name}\n\n\nDescription\n\n\nShow a job.\n\n\nParameters\n\n\n\n\n\n\n\n\nType\n\n\nName\n\n\nDescription\n\n\nSchema\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nPath\n\n\njob_name\n  \nrequired\n\n\nThe job that needs to be fetched.\n\n\nstring\n\n\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nHTTP Code\n\n\nDescription\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\n200\n\n\nSuccessful response\n\n\njob\n\n\n\n\n\n\n\n\nTags\n\n\n\n\njobs\n\n\n\n\n\n\nPOST /jobs/{job_name}\n\n\nDescription\n\n\nExecutes a job.\n\n\nParameters\n\n\n\n\n\n\n\n\nType\n\n\nName\n\n\nDescription\n\n\nSchema\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nPath\n\n\njob_name\n  \nrequired\n\n\nThe job that needs to be run.\n\n\nstring\n\n\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nHTTP Code\n\n\nDescription\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\n200\n\n\nSuccessful response\n\n\njob\n\n\n\n\n\n\n\n\nTags\n\n\n\n\njobs\n\n\n\n\n\n\nGET /leader\n\n\nDescription\n\n\nList members.\n\n\nResponses\n\n\n\n\n\n\n\n\nHTTP Code\n\n\nDescription\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\n200\n\n\nSuccessful response\n\n\nmember\n\n\n\n\n\n\n\n\nTags\n\n\n\n\ndefault\n\n\n\n\n\n\nGET /leave\n\n\nDescription\n\n\nForce the node to leave the cluster.\n\n\nResponses\n\n\n\n\n\n\n\n\nHTTP Code\n\n\nDescription\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\n200\n\n\nSuccessful response\n\n\n \nmember\n \n array\n\n\n\n\n\n\n\n\nTags\n\n\n\n\ndefault\n\n\n\n\n\n\nGET /members\n\n\nDescription\n\n\nList members.\n\n\nResponses\n\n\n\n\n\n\n\n\nHTTP Code\n\n\nDescription\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\n200\n\n\nSuccessful response\n\n\n \nmember\n \n array\n\n\n\n\n\n\n\n\nTags\n\n\n\n\nmembers\n\n\n\n\n\n\nDefinitions\n\n\n\n\nstatus\n\n\nStatus represents details about the node.\n\n\nType\n : object\n\n\n\n\njob\n\n\nA Job represents a scheduled task to execute.\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\nname\n  \nrequired\n\n\nName for the job.\n\n\nstring\n\n\n\n\n\n\nschedule\n  \nrequired\n\n\nCron expression for the job.\n\n\nstring\n\n\n\n\n\n\ncommand\n  \nrequired\n\n\nCommand to run.\n\n\nstring\n\n\n\n\n\n\nshell\n  \noptional\n\n\nUse shell to run the command\n\n\nboolean\n\n\n\n\n\n\nowner\n  \noptional\n\n\nOwner of the job\n\n\nstring\n\n\n\n\n\n\nowner_email\n  \noptional\n\n\nEmail of the owner\n\n\nstring\n\n\n\n\n\n\nsuccess_count\n  \noptional\n  \nread-only\n\n\nNumber of successful executions\n\n\ninteger\n\n\n\n\n\n\nerror_count\n  \noptional\n  \nread-only\n\n\nNumber of failed executions\n\n\ninteger\n\n\n\n\n\n\nlast_success\n  \noptional\n  \nread-only\n\n\nLast time this job executed successfully\n\n\nstring(date-time)\n\n\n\n\n\n\nlast_error\n  \noptional\n  \nread-only\n\n\nLast time this job failed\n\n\nstring(date-time)\n\n\n\n\n\n\ndisabled\n  \noptional\n\n\nDisabled state of the job\n\n\nboolean\n\n\n\n\n\n\ntags\n  \noptional\n\n\nTags asociated with this node\n\n\n string, string \n map\n\n\n\n\n\n\nretries\n  \noptional\n\n\nNumber of times to retry a failed job execution  \nExample\n : \n2\n\n\ninteger\n\n\n\n\n\n\nparent_job\n  \noptional\n\n\nThe name/id of the job that will trigger the execution of this job  \nExample\n : \n\"parent_job\"\n\n\nstring\n\n\n\n\n\n\ndependent_jobs\n  \noptional\n  \nread-only\n\n\nArray containing the jobs that depends on this one  \nExample\n : \n\"\"\n\n\nstring\n\n\n\n\n\n\n\n\n\n\nmember\n\n\nA member represents a cluster member node.\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\nName\n  \noptional\n\n\nNode name\n\n\nstring\n\n\n\n\n\n\nAddr\n  \noptional\n\n\nIP Address\n\n\nstring\n\n\n\n\n\n\nPort\n  \noptional\n\n\nPort number\n\n\ninteger\n\n\n\n\n\n\nTags\n  \noptional\n\n\nTags asociated with this node\n\n\n string, string \n map\n\n\n\n\n\n\nStatus\n  \noptional\n\n\nThe serf status of the node see: https://godoc.org/github.com/hashicorp/serf/serf#MemberStatus\n\n\ninteger\n\n\n\n\n\n\nProtocolMin\n  \noptional\n\n\nSerf protocol minimum version this node can understand or speak\n\n\ninteger\n\n\n\n\n\n\nProtocolMax\n  \noptional\n\n\ninteger\n\n\n\n\n\n\n\n\nProtocolCur\n  \noptional\n\n\nSerf protocol current version this node can understand or speak\n\n\ninteger\n\n\n\n\n\n\nDelegateMin\n  \noptional\n\n\nSerf delegate protocol minimum version this node can understand or speak\n\n\ninteger\n\n\n\n\n\n\nDelegateMax\n  \noptional\n\n\nSerf delegate protocol minimum version this node can understand or speak\n\n\ninteger\n\n\n\n\n\n\nDelegateCur\n  \noptional\n\n\nSerf delegate protocol minimum version this node can understand or speak\n\n\ninteger\n\n\n\n\n\n\n\n\n\n\nexecution\n\n\nAn execution represents a timed job run.\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\njob_name\n  \noptional\n\n\njob name\n\n\nstring\n\n\n\n\n\n\nstarted_at\n  \noptional\n\n\nstart time of the execution\n\n\nstring(date-time)\n\n\n\n\n\n\nfinished_at\n  \noptional\n\n\nwhen the execution finished running\n\n\nstring(date-time)\n\n\n\n\n\n\nsuccess\n  \noptional\n\n\nthe execution run successfuly\n\n\nboolean\n\n\n\n\n\n\noutput\n  \noptional\n\n\npartial output of the command execution\n\n\nstring\n\n\n\n\n\n\nnode_name\n  \noptional\n\n\nname of the node that executed the command\n\n\nstring", 
            "title": "Api"
        }, 
        {
            "location": "/docs/api/#dkron-rest-api", 
            "text": "", 
            "title": "Dkron REST API"
        }, 
        {
            "location": "/docs/api/#overview", 
            "text": "You can communicate with Dkron using a RESTful JSON API over HTTP. Dkron nodes usually listen on port  8080  for API requests. All examples in this section assume that you've found a running leader at  localhost:8080 .  Dkron implements a RESTful JSON API over HTTP to communicate with software clients. Dkron listens in port  8080  by default. All examples in this section assume that you're using the default port.  Default API responses are unformatted JSON add the  pretty=true  param to format the response.  Version information  Version  : 0.9.0  URI scheme  Host  : localhost:8080  BasePath  : /v1  Schemes  : HTTP  Consumes   application/json   Produces   application/json", 
            "title": "Overview"
        }, 
        {
            "location": "/docs/api/#paths", 
            "text": "GET /  Description  Gets  Status  object.  Responses     HTTP Code  Description  Schema      200  Successful response  status     Tags   default    GET /executions/{job_name}  Description  List executions.  Parameters     Type  Name  Description  Schema  Default      Path  job_name    required  The job that owns the executions to be fetched.  string      Responses     HTTP Code  Description  Schema      200  Successful response    execution    array     Tags   executions    GET /jobs  Description  List jobs.  Responses     HTTP Code  Description  Schema      200  Successful response    job    array     Tags   jobs    POST /jobs  Description  Create or updates a new job.  Parameters     Type  Name  Description  Schema  Default      Body  body    required  Updated job object  job      Responses     HTTP Code  Description  Schema      201  Successful response  job     Tags   jobs    DELETE /jobs/{job_name}  Description  Delete a job.  Parameters     Type  Name  Description  Schema  Default      Path  job_name    required  The job that needs to be deleted.  string      Responses     HTTP Code  Description  Schema      200  Successful response  job     Tags   jobs    GET /jobs/{job_name}  Description  Show a job.  Parameters     Type  Name  Description  Schema  Default      Path  job_name    required  The job that needs to be fetched.  string      Responses     HTTP Code  Description  Schema      200  Successful response  job     Tags   jobs    POST /jobs/{job_name}  Description  Executes a job.  Parameters     Type  Name  Description  Schema  Default      Path  job_name    required  The job that needs to be run.  string      Responses     HTTP Code  Description  Schema      200  Successful response  job     Tags   jobs    GET /leader  Description  List members.  Responses     HTTP Code  Description  Schema      200  Successful response  member     Tags   default    GET /leave  Description  Force the node to leave the cluster.  Responses     HTTP Code  Description  Schema      200  Successful response    member    array     Tags   default    GET /members  Description  List members.  Responses     HTTP Code  Description  Schema      200  Successful response    member    array     Tags   members", 
            "title": "Paths"
        }, 
        {
            "location": "/docs/api/#definitions", 
            "text": "status  Status represents details about the node.  Type  : object   job  A Job represents a scheduled task to execute.     Name  Description  Schema      name    required  Name for the job.  string    schedule    required  Cron expression for the job.  string    command    required  Command to run.  string    shell    optional  Use shell to run the command  boolean    owner    optional  Owner of the job  string    owner_email    optional  Email of the owner  string    success_count    optional    read-only  Number of successful executions  integer    error_count    optional    read-only  Number of failed executions  integer    last_success    optional    read-only  Last time this job executed successfully  string(date-time)    last_error    optional    read-only  Last time this job failed  string(date-time)    disabled    optional  Disabled state of the job  boolean    tags    optional  Tags asociated with this node   string, string   map    retries    optional  Number of times to retry a failed job execution   Example  :  2  integer    parent_job    optional  The name/id of the job that will trigger the execution of this job   Example  :  \"parent_job\"  string    dependent_jobs    optional    read-only  Array containing the jobs that depends on this one   Example  :  \"\"  string      member  A member represents a cluster member node.     Name  Description  Schema      Name    optional  Node name  string    Addr    optional  IP Address  string    Port    optional  Port number  integer    Tags    optional  Tags asociated with this node   string, string   map    Status    optional  The serf status of the node see: https://godoc.org/github.com/hashicorp/serf/serf#MemberStatus  integer    ProtocolMin    optional  Serf protocol minimum version this node can understand or speak  integer    ProtocolMax    optional  integer     ProtocolCur    optional  Serf protocol current version this node can understand or speak  integer    DelegateMin    optional  Serf delegate protocol minimum version this node can understand or speak  integer    DelegateMax    optional  Serf delegate protocol minimum version this node can understand or speak  integer    DelegateCur    optional  Serf delegate protocol minimum version this node can understand or speak  integer      execution  An execution represents a timed job run.     Name  Description  Schema      job_name    optional  job name  string    started_at    optional  start time of the execution  string(date-time)    finished_at    optional  when the execution finished running  string(date-time)    success    optional  the execution run successfuly  boolean    output    optional  partial output of the command execution  string    node_name    optional  name of the node that executed the command  string", 
            "title": "Definitions"
        }, 
        {
            "location": "/about/dkron_vs_other_software/", 
            "text": "Dkron vs. Other Software\n\n\nDkron vs. Chronos\n\n\nAirbnb's Chronos is a job scheduler that is similar to dkron, it's distributed and fault tolerant thanks to the use of Zookeeper and Apache Mesos.\n\n\nIt has a lot of nice features, like task dependencies, etc.\n\n\nIf you don't have/want to run a Mesos cluster and deal with the not easy configuration and maintenance of Zookeeper and you want something lighter, Dkron could help you.\n\n\nDkron vs. Rundeck\n\n\nRundeck is a popular and mature platform to automate operations and schedule jobs.\n\n\nIt has cool features:\n\n\n\n\nAgentless\n\n\nPermissions and auditing\n\n\n\n\nIt's written in Java and it's not trivial to setup right.\n\n\nIt uses a central database to store job execution results and configuration data, that makes it vulnerable to failures and you need to care yourself of providing it an HA environement or database to run and that's not an easy task to do with the Rundeck's supported databases.\n\n\nDkron lacks some of it's features but it's lightweight and fault-tolerant out-of-the-box.", 
            "title": "Dkron vs other software"
        }, 
        {
            "location": "/about/dkron_vs_other_software/#dkron-vs-other-software", 
            "text": "", 
            "title": "Dkron vs. Other Software"
        }, 
        {
            "location": "/about/dkron_vs_other_software/#dkron-vs-chronos", 
            "text": "Airbnb's Chronos is a job scheduler that is similar to dkron, it's distributed and fault tolerant thanks to the use of Zookeeper and Apache Mesos.  It has a lot of nice features, like task dependencies, etc.  If you don't have/want to run a Mesos cluster and deal with the not easy configuration and maintenance of Zookeeper and you want something lighter, Dkron could help you.", 
            "title": "Dkron vs. Chronos"
        }, 
        {
            "location": "/about/dkron_vs_other_software/#dkron-vs-rundeck", 
            "text": "Rundeck is a popular and mature platform to automate operations and schedule jobs.  It has cool features:   Agentless  Permissions and auditing   It's written in Java and it's not trivial to setup right.  It uses a central database to store job execution results and configuration data, that makes it vulnerable to failures and you need to care yourself of providing it an HA environement or database to run and that's not an easy task to do with the Rundeck's supported databases.  Dkron lacks some of it's features but it's lightweight and fault-tolerant out-of-the-box.", 
            "title": "Dkron vs. Rundeck"
        }, 
        {
            "location": "/about/license/", 
            "text": "License\n\n\nCopyright (c) Victor Castell\n\n\nDkron is an Open Source project licensed under the terms of\nthe LGPLv3 license.  Please see \nhttp://www.gnu.org/licenses/lgpl-3.0.html\n\nfor license text.", 
            "title": "License"
        }, 
        {
            "location": "/about/license/#license", 
            "text": "Copyright (c) Victor Castell  Dkron is an Open Source project licensed under the terms of\nthe LGPLv3 license.  Please see  http://www.gnu.org/licenses/lgpl-3.0.html \nfor license text.", 
            "title": "License"
        }
    ]
}