{
    "docs": [
        {
            "location": "/", 
            "text": "Characteristics\n\n\n  \n\n    \n\n    \n\n      \nEasy integration\n\n      \nDcron is easy to setup and use. Choose your OS package and it's ready to run out-of-the-box. The administration panel and it's simple JSON API makes a breeze to integrate with you current workflow or deploy system.\n\n    \n\n  \n\n\n  \n\n    \n\n    \n\n      \nAlways available\n\n      \nUsing the power of the Raft implementation in etcd, Dcron is designed to be always available. If the leader node fails, a follower will replace it, all without human intervention.\n\n    \n\n  \n\n\n  \n\n    \n\n    \n\n      \nFlexible targets\n\n      \nSimple but powerful tag based target node selection for jobs. Tag node count allows to run jobs in an arbitrary number nodes in the same group or groups.", 
            "title": "Home"
        }, 
        {
            "location": "/intro/", 
            "text": "Dcron - Distributed, fault tolerant job scheduling system\n\n\nWelcome to the Dcron documentation! This is the reference guide on how to use Drcon. If you want a getting started guide refer to the \ngetting started guide\n of the Dcron documentation.\n\n\nWarning: Dcron is Under heavy development, it's considered alpha state, expect dragons.\n\n\n\nNote: Version in this documentation, 0.0.2\n\n\n\nWhat is Dcron\n\n\nDcron it's distributed system to run scheduled jobs agains a server or a group of servers of any size. One of the machines is the leader and the others will be followrs. If the leader fails or becomes unreachable, any other one will take over and reschedule all jobs to keep the system healthy.\n\n\nIn case the old leader becomes alive again, it'll become a follower.\n\n\nDcron is a distributed cron drop-in replacement, easy to setup and fault tolerant with focus in:\n\n\n\n\nEasy: Easy to use with a great UI\n\n\nReliable: Completely fault tolerant\n\n\nHigh scalable: Able to handle high volumes of scheduled jobs and thousands of nodes\n\n\n\n\nDcron is written in Go and leverage the power of \netcd\n and \nSerf\n for providing fault tolerance and, reliability and scalability while keeping simple and easily instalable.\n\n\nDcron is inspired by the google whitepaper \nReliable Cron across the Planet\n\n\nDcron runs on Linux, OSX and Windows. It can be used to run scheduled commands on a server cluster using any combination of servers for each job. It has no single points of failure due to the use of the fault tolerant distributed database etcd and can work large scale thanks to the efficient and lightweight gossip protocol.\n\n\nDcron uses the efficient and lightweight \ngossip protocol\n underneath to communicate with nodes. Failure notification and task handling are run efficiently across an entire cluster of any size.\n\n\nDcron design\n\n\nDcron is designed to solve one problem well, executing commands in given intervals. Following the unix philosophy of doing one thing and doing it well (like the battle tested cron) but with the given addition of being designed for the cloud era, removing single points of failure in environments where scheduled jobs are need to be run in multiple servers.", 
            "title": "Intro"
        }, 
        {
            "location": "/intro/#dcron-distributed-fault-tolerant-job-scheduling-system", 
            "text": "Welcome to the Dcron documentation! This is the reference guide on how to use Drcon. If you want a getting started guide refer to the  getting started guide  of the Dcron documentation.  Warning: Dcron is Under heavy development, it's considered alpha state, expect dragons.  Note: Version in this documentation, 0.0.2", 
            "title": "Dcron - Distributed, fault tolerant job scheduling system"
        }, 
        {
            "location": "/intro/#what-is-dcron", 
            "text": "Dcron it's distributed system to run scheduled jobs agains a server or a group of servers of any size. One of the machines is the leader and the others will be followrs. If the leader fails or becomes unreachable, any other one will take over and reschedule all jobs to keep the system healthy.  In case the old leader becomes alive again, it'll become a follower.  Dcron is a distributed cron drop-in replacement, easy to setup and fault tolerant with focus in:   Easy: Easy to use with a great UI  Reliable: Completely fault tolerant  High scalable: Able to handle high volumes of scheduled jobs and thousands of nodes   Dcron is written in Go and leverage the power of  etcd  and  Serf  for providing fault tolerance and, reliability and scalability while keeping simple and easily instalable.  Dcron is inspired by the google whitepaper  Reliable Cron across the Planet  Dcron runs on Linux, OSX and Windows. It can be used to run scheduled commands on a server cluster using any combination of servers for each job. It has no single points of failure due to the use of the fault tolerant distributed database etcd and can work large scale thanks to the efficient and lightweight gossip protocol.  Dcron uses the efficient and lightweight  gossip protocol  underneath to communicate with nodes. Failure notification and task handling are run efficiently across an entire cluster of any size.", 
            "title": "What is Dcron"
        }, 
        {
            "location": "/intro/#dcron-design", 
            "text": "Dcron is designed to solve one problem well, executing commands in given intervals. Following the unix philosophy of doing one thing and doing it well (like the battle tested cron) but with the given addition of being designed for the cloud era, removing single points of failure in environments where scheduled jobs are need to be run in multiple servers.", 
            "title": "Dcron design"
        }, 
        {
            "location": "/user-guide/getting-started/", 
            "text": "Getting started\n\n\nWelcome to the intro guide to Dcron! This will explain how to setup serf, how easy is to use it, what problems could it help you to solve, etc.\n\n\nIntroduction\n\n\nDcron nodes can work in two modes, agents or servers.\n\n\nServers are agents too. You can use servers to run jobs.\n\n\nThe main distinction is that servers order job executions and can be used to schedule jobs.\n\n\nDcron servers have a leader, the leader is responsible of executing jobs in the cluster.\n\n\nAny dcron agent or server acts as a cluster member and it's available to run scheduled tasks.\n\n\nYou can choose whether a job is run on a node or nodes by specifying tags and a count of target nodes having this tag do you want a job to run. For example you can specify to run a job at 5:00am in all servers with role=web tag or you can specify to run a job in just one server of having the role=web tag:\n\n\nrole=web:1\n\n\n\n\nDcron will try to run the job in the amount of nodes indicated by that count having that tag.\n\n\nThis gives an unprecedented level of flexibility in runnig jobs across a cluster of any size and with any combination of machines you need.\n\n\nAll the execution responses will be gathered by the scheduler and stored in the database.\n\n\nInstallation\n\n\nSimply download the packaged archive for your platform from the downloads page, extract the package to a shared location in your drive, like \n/opt/local\n and run it from there.\n\n\nUbuntu\n\n\nSample upstart scripts for Dcron are included in the \nextras\n folder\n\n\nDebian\n\n\nSample init scripts are included in the \nextras\n folder\n\n\nConfiguration\n\n\nSee the \nconfiguration section\n.\n\n\nUsage\n\n\nDcron relies on etcd for data storage, the etcd executable is included in the package and can be used to run an etcd node along with dcron servers.\n\n\nBy default Dcron will start the etcd server when running in server mode and try to form a cluster.\n\n\nIf you want to use an existing etcd cluster of your own, you can specify it by setting the \nno-etcd\n flag in the config file or as a command line flag.\n\n\nTo start a Dcron server instance just run:\n\n\ndcron agent --server", 
            "title": "Getting started"
        }, 
        {
            "location": "/user-guide/getting-started/#getting-started", 
            "text": "Welcome to the intro guide to Dcron! This will explain how to setup serf, how easy is to use it, what problems could it help you to solve, etc.", 
            "title": "Getting started"
        }, 
        {
            "location": "/user-guide/getting-started/#introduction", 
            "text": "Dcron nodes can work in two modes, agents or servers.  Servers are agents too. You can use servers to run jobs.  The main distinction is that servers order job executions and can be used to schedule jobs.  Dcron servers have a leader, the leader is responsible of executing jobs in the cluster.  Any dcron agent or server acts as a cluster member and it's available to run scheduled tasks.  You can choose whether a job is run on a node or nodes by specifying tags and a count of target nodes having this tag do you want a job to run. For example you can specify to run a job at 5:00am in all servers with role=web tag or you can specify to run a job in just one server of having the role=web tag:  role=web:1  Dcron will try to run the job in the amount of nodes indicated by that count having that tag.  This gives an unprecedented level of flexibility in runnig jobs across a cluster of any size and with any combination of machines you need.  All the execution responses will be gathered by the scheduler and stored in the database.", 
            "title": "Introduction"
        }, 
        {
            "location": "/user-guide/getting-started/#installation", 
            "text": "Simply download the packaged archive for your platform from the downloads page, extract the package to a shared location in your drive, like  /opt/local  and run it from there.  Ubuntu  Sample upstart scripts for Dcron are included in the  extras  folder  Debian  Sample init scripts are included in the  extras  folder", 
            "title": "Installation"
        }, 
        {
            "location": "/user-guide/getting-started/#configuration", 
            "text": "See the  configuration section .", 
            "title": "Configuration"
        }, 
        {
            "location": "/user-guide/getting-started/#usage", 
            "text": "Dcron relies on etcd for data storage, the etcd executable is included in the package and can be used to run an etcd node along with dcron servers.  By default Dcron will start the etcd server when running in server mode and try to form a cluster.  If you want to use an existing etcd cluster of your own, you can specify it by setting the  no-etcd  flag in the config file or as a command line flag.  To start a Dcron server instance just run:  dcron agent --server", 
            "title": "Usage"
        }, 
        {
            "location": "/user-guide/api/", 
            "text": "REST API\n\n\nYou can communicate with Dcron using a RESTful JSON API over HTTP. Dcron nodes usually listen on port 8080 for API requests. All examples in this section assume that you've found a running leader at dcron-node:8080.\n\n\nDcron implements a RESTful JSON API over HTTP to communicate with software clients. Dcron listens in port 8080 by default. All examples in this section assume that you're using the default port.\n\n\nLeaders\n\n\nLeaders\n\n\nWhen you have multiple Dcron nodes in server mode running, only one of them will be elected as the leader. In Dcron you can talk to any node running in server mode all of them could handle your request but only the leader will actually run the scheduler.\n\n\nIndex\n\n\n\n\nEndpoint: \n/\n\n\nMethod: \nGET\n\n\nExample: \ncurl -XGET dcron-node:8080\n\n\n\n\nIt returns info about the agent queried.\n\n\nGet Jobs\n\n\n\n\nEndpoint: \n/jobs\n\n\nMethod: \nGET\n\n\nExample: \ncurl -L -X GET dcron-node:8080/jobs\n\n\n\n\nDeleting a Job\n\n\nGet a job name from the job listing above. Then:\n\n\n\n\nEndpoint: \n/jobs/jobName\n\n\nMethod: \nDELETE\n\n\nExample: `curl -L -X DELETE dcron-node:8080/job/aggregate_stats``\n\n\n\n\nManually Starting a Job\n\n\nYou can manually start a job by issuing an HTTP request.\n\n\n\n\nEndpoint: \n/jobs/job_name\n\n\nMethod: \nPUT\n\n\nQuery string parameters: arguments - optional string with a list of command line arguments that is appended to job's command\n\n\nExample: \ncurl -L -X PUT dcron-node:8080/jobs/aggregate_stats\n\n\nExample: \ncurl -L -X PUT dcron-node:8080/jobs/aggregate_stats?arguments=-debug\n\n\n\n\nGet job executions\n\n\n\n\nEndpoint: \n/executions/job\n\n\nMethod: \nGET\n\n\nExample: \ncurl -L -X GET dcron-node:8080/executions/aggregate_stats", 
            "title": "Api"
        }, 
        {
            "location": "/user-guide/api/#rest-api", 
            "text": "You can communicate with Dcron using a RESTful JSON API over HTTP. Dcron nodes usually listen on port 8080 for API requests. All examples in this section assume that you've found a running leader at dcron-node:8080.  Dcron implements a RESTful JSON API over HTTP to communicate with software clients. Dcron listens in port 8080 by default. All examples in this section assume that you're using the default port.  Leaders", 
            "title": "REST API"
        }, 
        {
            "location": "/user-guide/api/#leaders", 
            "text": "When you have multiple Dcron nodes in server mode running, only one of them will be elected as the leader. In Dcron you can talk to any node running in server mode all of them could handle your request but only the leader will actually run the scheduler.", 
            "title": "Leaders"
        }, 
        {
            "location": "/user-guide/api/#index", 
            "text": "Endpoint:  /  Method:  GET  Example:  curl -XGET dcron-node:8080   It returns info about the agent queried.", 
            "title": "Index"
        }, 
        {
            "location": "/user-guide/api/#get-jobs", 
            "text": "Endpoint:  /jobs  Method:  GET  Example:  curl -L -X GET dcron-node:8080/jobs", 
            "title": "Get Jobs"
        }, 
        {
            "location": "/user-guide/api/#deleting-a-job", 
            "text": "Get a job name from the job listing above. Then:   Endpoint:  /jobs/jobName  Method:  DELETE  Example: `curl -L -X DELETE dcron-node:8080/job/aggregate_stats``", 
            "title": "Deleting a Job"
        }, 
        {
            "location": "/user-guide/api/#manually-starting-a-job", 
            "text": "You can manually start a job by issuing an HTTP request.   Endpoint:  /jobs/job_name  Method:  PUT  Query string parameters: arguments - optional string with a list of command line arguments that is appended to job's command  Example:  curl -L -X PUT dcron-node:8080/jobs/aggregate_stats  Example:  curl -L -X PUT dcron-node:8080/jobs/aggregate_stats?arguments=-debug", 
            "title": "Manually Starting a Job"
        }, 
        {
            "location": "/user-guide/api/#get-job-executions", 
            "text": "Endpoint:  /executions/job  Method:  GET  Example:  curl -L -X GET dcron-node:8080/executions/aggregate_stats", 
            "title": "Get job executions"
        }, 
        {
            "location": "/about/license/", 
            "text": "License\n\n\nCopyright (c) Victor Castell\n\n\nDcron is an Open Source project licensed under the terms of\nthe LGPLv3 license.  Please see \nhttp://www.gnu.org/licenses/lgpl-3.0.html\n\nfor license text.", 
            "title": "License"
        }, 
        {
            "location": "/about/license/#license", 
            "text": "Copyright (c) Victor Castell  Dcron is an Open Source project licensed under the terms of\nthe LGPLv3 license.  Please see  http://www.gnu.org/licenses/lgpl-3.0.html \nfor license text.", 
            "title": "License"
        }, 
        {
            "location": "/about/dcron_vs_other_software/", 
            "text": "Dcron vs. Other Software\n\n\nDcron vs. Chronos\n\n\nAirbnb's Chronos is a job scheduler that is similar to dcron, it's distributed and fault tolerant thanks to the use of Zookeeper and Apache Mesos.\n\n\nIt has a lot of nice features, like task dependencies, etc.\n\n\nIf you don't have/want to run a Mesos cluster and deal with the not easy configuration and maintenance of Zookeeper and you want something lighter, Dcron could help you.\n\n\nDcron vs. Rundeck\n\n\nRundeck is a popular and mature platform to automate operations and schedule jobs.\n\n\nIt has cool features:\n\n\n\n\nAgentless\n\n\nPermissions and auditing\n\n\n\n\nIt's written in Java and it's not trivial to setup right.\n\n\nIt uses a central database to store job execution results and configuration data, that makes it vulnerable to failures and you need to care yourself of providing it an HA environement or database to run and that's not an easy task to do with the Rundeck's supported databases.\n\n\nDcron lacks some of it's features but it's lightweight and fault-tolerant out-of-the-box.", 
            "title": "Dcron vs other software"
        }, 
        {
            "location": "/about/dcron_vs_other_software/#dcron-vs-other-software", 
            "text": "", 
            "title": "Dcron vs. Other Software"
        }, 
        {
            "location": "/about/dcron_vs_other_software/#dcron-vs-chronos", 
            "text": "Airbnb's Chronos is a job scheduler that is similar to dcron, it's distributed and fault tolerant thanks to the use of Zookeeper and Apache Mesos.  It has a lot of nice features, like task dependencies, etc.  If you don't have/want to run a Mesos cluster and deal with the not easy configuration and maintenance of Zookeeper and you want something lighter, Dcron could help you.", 
            "title": "Dcron vs. Chronos"
        }, 
        {
            "location": "/about/dcron_vs_other_software/#dcron-vs-rundeck", 
            "text": "Rundeck is a popular and mature platform to automate operations and schedule jobs.  It has cool features:   Agentless  Permissions and auditing   It's written in Java and it's not trivial to setup right.  It uses a central database to store job execution results and configuration data, that makes it vulnerable to failures and you need to care yourself of providing it an HA environement or database to run and that's not an easy task to do with the Rundeck's supported databases.  Dcron lacks some of it's features but it's lightweight and fault-tolerant out-of-the-box.", 
            "title": "Dcron vs. Rundeck"
        }
    ]
}