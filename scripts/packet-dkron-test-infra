#!/usr/bin/env bash

# This script is used to provision the Dkron testing infrastructure under Packet hosting
# This uses docker-machine for bootstrapping the infra using the docker-machine-packet-driver
# https://github.com/packethost/docker-machine-driver-packet
# Set PACKET_API_TOKEN env var before provisioning

# Provision the manager
#docker-machine create -d packet --packet-project-id=904af849-79ff-4847-90f7-dfa02367ae72 --packet-os=ubuntu_14_04 --packet-plan=baremetal_0 --packet-facility-code=ams1 --swarm --swarm-master manager1

# Provision several workers
# for i in {1..4}
# do
#    docker-machine create -d packet --packet-project-id=904af849-79ff-4847-90f7-dfa02367ae72 --packet-os=ubuntu_14_04 --packet-plan=baremetal_0 --packet-facility-code=ams1 --swarm worker$i &
# done

#docker swarm join \
#    --token SWMTKN-1-18u9zvaz0o08jfqqr8p5bxf6fmgisjonbp55ku0lv33hlzzoz0-5q3w6vsgkkjos893mhz07aqwk \
#    10.80.76.131:2377

for node in manager1 worker1 worker2 worker3 worker4
do
    eval $(docker-machine env $node)
    docker run -d --name dd-agent -v /var/run/docker.sock:/var/run/docker.sock:ro -v /proc/:/host/proc/:ro -v /sys/fs/cgroup/:/host/sys/fs/cgroup:ro -e API_KEY=$DD_API_KEY datadog/docker-dd-agent:latest
done

eval $(docker-machine env manager1)

#docker service rm etcd0 etcd1 etcd2

DISCOVERY_URL=$(curl -s 'https://discovery.etcd.io/new?size=3')

docker service create --mount type=bind,source=/usr/share/ca-certificates/mozilla,destination=/etc/ssl/certs \
--name etcd0 \
--network my-net \
--publish 4001:4001 \
quay.io/coreos/etcd etcd \
-name etcd0 \
-advertise-client-urls http://0.0.0.0:2379,http://0.0.0.0:4001 \
-listen-client-urls http://0.0.0.0:2379,http://0.0.0.0:4001 \
-listen-peer-urls http://0.0.0.0:2380 \
-initial-advertise-peer-urls http://etcd0:2380 \
-initial-cluster-state new \
--discovery $DISCOVERY_URL

docker service create --mount type=bind,source=/usr/share/ca-certificates/mozilla,destination=/etc/ssl/certs \
--name etcd1 \
--network my-net \
--publish 4002:4001 \
quay.io/coreos/etcd etcd \
-name etcd1 \
-advertise-client-urls http://0.0.0.0:2379,http://0.0.0.0:4001 \
-listen-client-urls http://0.0.0.0:2379,http://0.0.0.0:4001 \
-listen-peer-urls http://0.0.0.0:2380 \
-initial-advertise-peer-urls http://etcd1:2380 \
-initial-cluster-state new \
-discovery $DISCOVERY_URL

docker service create --mount type=bind,source=/usr/share/ca-certificates/mozilla,destination=/etc/ssl/certs \
--name etcd2 \
--network my-net \
--publish 4003:4001 \
quay.io/coreos/etcd etcd \
-name etcd2 \
-advertise-client-urls http://0.0.0.0:2379,http://0.0.0.0:4001 \
-listen-client-urls http://0.0.0.0:2379,http://0.0.0.0:4001 \
-listen-peer-urls http://0.0.0.0:2380 \
-initial-advertise-peer-urls http://etcd2:2380 \
-initial-cluster-state new \
-discovery $DISCOVERY_URL

# docker service rm dkron-etcd

docker service create \
--name dkron-etcd \
--network my-net \
--publish 8080:8080 \
--replicas 5 \
dkron/dkron:v0.9.2 \
agent -server -bind=0.0.0.0:8946 -backend=etcd -backend-machine=etcd0:4001 -join=dkron-etcd:8946 -log-level=debug

# docker service rm consul consul1

docker service create \
--name consul \
--network my-net \
--publish 8500:8500 \
progrium/consul -server -bootstrap-expect 3

docker service create \
--name consul1 \
--network my-net \
--publish 8500:8500 \
--replicas 2 \
progrium/consul -server -join consul

# docker service rm dkron-consul

docker service create \
--name dkron-consul \
--network my-net \
--publish 8081:8080 \
--replicas 5 \
dkron/dkron:v0.9.2 \
agent -server -bind=0.0.0.0:8947 -backend=consul -backend-machine=consul:8500 -join=dkron-consul:8947 -log-level=debug

# docker service rm zoo1 zoo2 zoo3

docker service create \
--name zoo1 \
--network my-net \
--env ZOO_MY_ID=1 \
--env ZOO_SERVERS='server.1=0.0.0.0:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888' \
zookeeper

docker service create \
--name zoo2 \
--network my-net \
--env ZOO_MY_ID=2 \
--env ZOO_SERVERS='server.1=zoo1:2888:3888 server.2=0.0.0.0:2888:3888 server.3=zoo3:2888:3888' \
zookeeper

docker service create \
--name zoo3 \
--network my-net \
--env ZOO_MY_ID=3 \
--env ZOO_SERVERS='server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=0.0.0.0:2888:3888' \
zookeeper

docker service rm dkron-zk

docker service create \
--name dkron-zk \
--network my-net \
--publish 8082:8080 \
--replicas 5 \
dkron/dkron:v0.9.2 \
agent -server -bind=0.0.0.0:8948 -backend=zk -backend-machine=zoo1:2181 -join=dkron-zk:8948 -log-level=debug
